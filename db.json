{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/freemind/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/freemind/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/bootstrap-responsive.css","path":"css/bootstrap-responsive.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/font-awesome.css","path":"css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/google-fonts.css","path":"css/google-fonts.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/highlight.css","path":"css/highlight.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/responsive.css","path":"css/responsive.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/update-style.css","path":"css/update-style.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/img/github-sprite.png","path":"img/github-sprite.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/img/glyphicons-halflings-white.png","path":"img/glyphicons-halflings-white.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/img/glyphicons-halflings.png","path":"img/glyphicons-halflings.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/img/grid-18px-masked.png","path":"img/grid-18px-masked.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/img/grid-baseline-20px.png","path":"img/grid-baseline-20px.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/fonts/Fixedsys500c.eot","path":"css/fonts/Fixedsys500c.eot","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/fonts/Fixedsys500c.otf","path":"css/fonts/Fixedsys500c.otf","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/fonts/Fixedsys500c.ttf","path":"css/fonts/Fixedsys500c.ttf","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/fonts/Fixedsys500c.woff","path":"css/fonts/Fixedsys500c.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","path":"fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","path":"fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","path":"fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","path":"fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","path":"fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","path":"fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","path":"fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/fonts/Fixedsys500c.svg","path":"css/fonts/Fixedsys500c.svg","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","path":"fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/bootstrap.css.map","path":"css/bootstrap.css.map","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"6b140ea1acea934e7cf6aff4e884a7ce3c2a628e","modified":1599964550351},{"_id":"themes/freemind/LICENSE","hash":"f26ce5333bd73ee6f0f9bb2c97fcf5707c1c7715","modified":1599964550353},{"_id":"themes/freemind/README.md","hash":"a1756035db0b9e53e856557d754e53ebf9150d03","modified":1599964550353},{"_id":"themes/freemind/_config.yml","hash":"4529679688d22542048da08749838cb013c65e44","modified":1601805653180},{"_id":"source/_data/galleries.json","hash":"d4f91c1025877687dfbd9fcc5d116e954dd3037f","modified":1599964550351},{"_id":"source/_posts/vue大型项目高性能优化-想说爱你真的不容易.md","hash":"fa08d66ae48a9bf830a46d2de20fece084c99fe0","modified":1600571139577},{"_id":"source/_posts/程序员标配-使用hexo-github搭建个人博客.md","hash":"0cd98acb028de42a31631f21fa4b4ca4593746e9","modified":1600759177669},{"_id":"source/about/index.md","hash":"12a843160bfd9344fcaf62ded4a36f2734f98581","modified":1599964725245},{"_id":"source/categories/index.md","hash":"2515b30266b2ed89ae4218d63ef519e03325c517","modified":1599964550352},{"_id":"source/music/index.md","hash":"5aaff630df63be606575c118606fb145fe60aa8f","modified":1601431576483},{"_id":"source/tags/index.md","hash":"c6a95b31fb46533c82fa17c0dc6298fb7f9d7975","modified":1599964550353},{"_id":"themes/freemind/languages/default.yml","hash":"37230babe8a02948ab132ccf344acb9922795b12","modified":1599964550353},{"_id":"themes/freemind/languages/pt-BR.yml","hash":"e58d02636dc47f698cc6c2045edffc1a08772639","modified":1599964550353},{"_id":"themes/freemind/languages/zh-CN.yml","hash":"04322797a702d3bca599706e1d0e2210a7af9a81","modified":1599964550354},{"_id":"themes/freemind/languages/zh-TW.yml","hash":"633a09b238cfadcf3c6f3dbec58cf60822d23a44","modified":1599964550354},{"_id":"themes/freemind/layout/archive.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1599964550358},{"_id":"themes/freemind/layout/categories.ejs","hash":"75931cf16ce89871f53d09e918109bcb0c7741a1","modified":1599964550358},{"_id":"themes/freemind/layout/index.ejs","hash":"27993280992ed3f03a01739c5290f242eab66759","modified":1599964550358},{"_id":"themes/freemind/layout/layout.ejs","hash":"cd333c7859008552037659012011990a9b32d2c4","modified":1599964550358},{"_id":"themes/freemind/layout/page.ejs","hash":"aa9483e0a2601d347265b697d41fb57504d6512d","modified":1601723454012},{"_id":"themes/freemind/layout/post.ejs","hash":"8535eadbfcb7e52325f16da412ecc04cd1426203","modified":1601343926968},{"_id":"themes/freemind/layout/tags.ejs","hash":"4a39d2fe5cd2b005b9a18b30a11566d631a977fe","modified":1599964550359},{"_id":"themes/freemind/source/favicon.ico","hash":"bbfe456d427483c27cda0bd10fec5cc1f848c1f1","modified":1599964550367},{"_id":"themes/freemind/source/favicon.png","hash":"3247c02b3e3516aca534bcfa7a7c34b30defa298","modified":1599964550368},{"_id":"themes/freemind/layout/_partial/after_footer.ejs","hash":"59b4ade0400f04b19bc73a1ae7e66ea5cdef48fc","modified":1599964550354},{"_id":"themes/freemind/layout/_partial/archive.ejs","hash":"6eeb24ae52e46343ba6e9fd7cfa56ee79589f421","modified":1599964550354},{"_id":"themes/freemind/layout/_partial/article.ejs","hash":"1587662a40f2162b830fa49ff7310f0ce02c3db6","modified":1601346742481},{"_id":"themes/freemind/layout/_partial/footer.ejs","hash":"73463486ceeeba18f879991e4592e076e352b253","modified":1601343737971},{"_id":"themes/freemind/layout/_partial/head.ejs","hash":"dda3990e2c01313909041aad425dac18d4a5ed6f","modified":1601805634788},{"_id":"themes/freemind/layout/_partial/index.ejs","hash":"5bfa3e5bfefc77efdf731261910eaae86842296d","modified":1601723504742},{"_id":"themes/freemind/layout/_partial/index_pagination.ejs","hash":"64741f67cbcd03a3a203fa9c080e7239710eddd9","modified":1599964550355},{"_id":"themes/freemind/layout/_partial/navigation.ejs","hash":"e4d9af8d4cae60541a8e8f0f8caeeb28aaf5ca33","modified":1599964550355},{"_id":"themes/freemind/layout/_partial/search.ejs","hash":"f00bcd7cdef50a727600960de1d8b6a9e9b360b4","modified":1599964550357},{"_id":"themes/freemind/layout/_partial/sidebar.ejs","hash":"0574610968679984f6aec4b31fbba655df972d28","modified":1599964550357},{"_id":"themes/freemind/layout/_widget/category.ejs","hash":"7452e116d550f8a5c5beff8cac3ac56645f035ae","modified":1599964550358},{"_id":"themes/freemind/layout/_widget/links.ejs","hash":"209f60bec33c1179dff9bd09c66dc2c036246b40","modified":1599964550358},{"_id":"themes/freemind/layout/_widget/recent_posts.ejs","hash":"a9333350df895e2bc85c60c17c47a6a1dfa846e7","modified":1599964550358},{"_id":"themes/freemind/layout/_widget/search.ejs","hash":"4285aba68a17e8e3bf4ec83d7315cce3da72124c","modified":1601806456548},{"_id":"themes/freemind/layout/_widget/tagcloud.ejs","hash":"4d592eb23466383f3224e36474b2e4dfe85e4d42","modified":1599964550358},{"_id":"themes/freemind/source/css/.emacs.desktop","hash":"f6c93c6c3dde00e320c4f41f40a1b16b63906df1","modified":1599964550359},{"_id":"themes/freemind/source/css/bootstrap-responsive.css","hash":"b668e794bc3f24fd718d24304605000c5a8be0f9","modified":1599964550360},{"_id":"themes/freemind/source/css/font-awesome.css","hash":"5eca1a5aef2ef4fb845f7e5a96c27f74a5bd1763","modified":1599964550362},{"_id":"themes/freemind/source/css/google-fonts.css","hash":"06db66e315b47f844fb208b50e5710606360b142","modified":1599964550365},{"_id":"themes/freemind/source/css/highlight.css","hash":"a9c4c7c84ad34698cfddda3bbd1cd909b69d1903","modified":1599964550365},{"_id":"themes/freemind/source/css/responsive.css","hash":"30f6a26aa0a5368d24a68575eb3fe254de7b92d2","modified":1599964550365},{"_id":"themes/freemind/source/css/style.css","hash":"63846eb7fa6664b361ce1411efc6d46921c47dd5","modified":1599964550365},{"_id":"themes/freemind/source/css/update-style.css","hash":"b14b32498c5fe0ab7f1afecf8fba8b84a04caaa9","modified":1599964550365},{"_id":"themes/freemind/source/fancybox/blank.gif","hash":"4ffebfc1255c0da73aab342450a9ee09fcaccb86","modified":1599964550365},{"_id":"themes/freemind/source/fancybox/fancybox_loading.gif","hash":"4fbaf63664f65a42bef60289c887cd61a925ce4c","modified":1599964550366},{"_id":"themes/freemind/source/fancybox/fancybox_loading@2x.gif","hash":"381e91e67e85bfda09ce8b88205d93d9a7d20d4d","modified":1599964550366},{"_id":"themes/freemind/source/fancybox/fancybox_overlay.png","hash":"beb714da455e5dbdbf7b2ed466ff4308c103addb","modified":1599964550366},{"_id":"themes/freemind/source/fancybox/fancybox_sprite.png","hash":"0657b6b574bafc4c819c7d6c3bc5dd7205c8eee7","modified":1599964550366},{"_id":"themes/freemind/source/fancybox/fancybox_sprite@2x.png","hash":"ecf1523aefe416a4cc901ab4cda5d488e3d9cd76","modified":1599964550367},{"_id":"themes/freemind/source/fancybox/jquery.fancybox.css","hash":"cbb69ef9748bf92edc3eb4b269b77ad25465d049","modified":1599964550367},{"_id":"themes/freemind/source/fancybox/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1599964550367},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1599964550369},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1599964550373},{"_id":"themes/freemind/source/img/github-sprite.png","hash":"7e3ba97164323840fbe3a175b8535087ece93711","modified":1599964550377},{"_id":"themes/freemind/source/img/glyphicons-halflings-white.png","hash":"3f6acfb147851b261f24b030a840b758c4667e26","modified":1599964550377},{"_id":"themes/freemind/source/img/glyphicons-halflings.png","hash":"0b92d4a64699af327eff00b727f1aa46361debfa","modified":1599964550377},{"_id":"themes/freemind/source/img/grid-18px-masked.png","hash":"2a5b89bc935f2a53870f8788b573971dc3ac7358","modified":1599964550377},{"_id":"themes/freemind/source/img/grid-baseline-20px.png","hash":"f51efa3d9ee45c6053bb76244fdf7dd8967b7b6b","modified":1599964550377},{"_id":"themes/freemind/source/js/bootstrap.min.js","hash":"9933cdc70c0047a3ea1a196f9320c36737b93c2a","modified":1599964550378},{"_id":"themes/freemind/source/js/gallery.js","hash":"10cad81731825178f3d30b80a2694a377c1fb7a6","modified":1599964550378},{"_id":"themes/freemind/source/js/jquery.imagesloaded.min.js","hash":"3eb6381d2ed4b706020e4be5aff024aab4bcabc5","modified":1599964550379},{"_id":"themes/freemind/source/js/main.js","hash":"e3fcd795564533a3984b0ce327bd8dff44145f89","modified":1599964550380},{"_id":"themes/freemind/source/js/search.js","hash":"a882244488031de498176fc6af35cea2a13c7a18","modified":1599964550380},{"_id":"themes/freemind/source/css/bootstrap.min.css","hash":"468c662a80ef582fa1ae492ebe5d415c9b275818","modified":1599964550362},{"_id":"themes/freemind/source/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1599964550369},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1599964550372},{"_id":"themes/freemind/source/js/jquery-2.0.3.min.js","hash":"3dad20239301f9ee22f22ca7d5ac6eca1da4ac22","modified":1599964550379},{"_id":"themes/freemind/layout/_partial/post/analytics.ejs","hash":"5edcbdd411b9d95ef11844ccf1454fdf978cee01","modified":1599964550356},{"_id":"themes/freemind/layout/_partial/post/category.ejs","hash":"cc5b4cc95af6d5df4f7d1f1301dad8d4a5c7f8d0","modified":1599964550356},{"_id":"themes/freemind/layout/_partial/post/comment.ejs","hash":"94c2df9d0017e325b5ad052f76355a218328fc62","modified":1599964550356},{"_id":"themes/freemind/layout/_partial/post/comment_footer.ejs","hash":"b3a6db566afdf0931909013926b7008eac9129ee","modified":1599964550356},{"_id":"themes/freemind/layout/_partial/post/entry.ejs","hash":"c7a40f6fa8297daeb7f4c7ec35985c412094bc7b","modified":1599964550356},{"_id":"themes/freemind/layout/_partial/post/meta.ejs","hash":"039da08be543903bfc9f4786ab771b4fff0578dc","modified":1601345889443},{"_id":"themes/freemind/layout/_partial/post/pagination.ejs","hash":"ea48347c56412921da646bfe5c293bfd275c8a9d","modified":1599964550357},{"_id":"themes/freemind/layout/_partial/post/slogan.ejs","hash":"ab0e8ce73ee3e98c5507b6a4ffe4385e2ba81d9e","modified":1599964550357},{"_id":"themes/freemind/layout/_partial/post/share.ejs","hash":"991cf130c37f08c7e948772fb45587592b165b55","modified":1599964550357},{"_id":"themes/freemind/layout/_partial/post/tag.ejs","hash":"ae292045468812e678780288e51b1b19fa7e3e0c","modified":1599964550357},{"_id":"themes/freemind/layout/_partial/post/title.ejs","hash":"ce8eb57990e7dac5e472832235ec719863b35201","modified":1599964550357},{"_id":"themes/freemind/layout/_partial/post/valine.ejs","hash":"e30a3096c469531ec631260c7a3aed2f1b8685ea","modified":1599964550357},{"_id":"themes/freemind/source/css/fonts/Fixedsys500c.eot","hash":"49611cf2e4d7e5c489c191f994ba7ac315bcce5c","modified":1599964550363},{"_id":"themes/freemind/source/css/fonts/Fixedsys500c.otf","hash":"e1fede43e072a990b9cd9899cdd26b78b30d305d","modified":1599964550363},{"_id":"themes/freemind/source/css/fonts/Fixedsys500c.ttf","hash":"19a8e49df8611dd0d90133a2eb0e410c23932db4","modified":1599964550364},{"_id":"themes/freemind/source/css/fonts/Fixedsys500c.woff","hash":"21f8e34c5e252a54710c5f6b0e363b9c43f979b2","modified":1599964550365},{"_id":"themes/freemind/source/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","hash":"1d9bb14c006d39d7eb0812a85567c7431f899b8d","modified":1599964550373},{"_id":"themes/freemind/source/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","hash":"87deb174af2e2beebb9f09d618a5159ca299a3d0","modified":1599964550374},{"_id":"themes/freemind/source/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","hash":"f401d51152681048c06187c5d3919b1407b899c5","modified":1599964550375},{"_id":"themes/freemind/source/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","hash":"18dc51e642b4df958098d3bbc6d3ba0237ef6150","modified":1599964550376},{"_id":"themes/freemind/source/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","hash":"d9f913d09bb3c25749daf8e7ab829c850a842929","modified":1599964550376},{"_id":"themes/freemind/source/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","hash":"17a484b92c0dacc8e8b4f0d38ccc1db400819d1d","modified":1599964550376},{"_id":"themes/freemind/source/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","hash":"e6c9f1e5a6a966a8f7250201356f351890a48921","modified":1599964550377},{"_id":"themes/freemind/source/css/fonts/Fixedsys500c.svg","hash":"584b95873e60ea5d4212dc42cb37f4643d3a1915","modified":1599964550364},{"_id":"themes/freemind/source/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","hash":"33225e85c33279e7b4f0c5c65ff93bec740dd59c","modified":1599964550374},{"_id":"themes/freemind/source/css/bootstrap.css.map","hash":"6925683e03d7cae9dc542bfcca38eccf6f66169c","modified":1599964550361},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.svg","hash":"e471023286b7dd1d2ccc72f670a471cfdfeafab7","modified":1599964550371},{"_id":"public/search.xml","hash":"46d0287bc2ad7c452e9bbb935a5f9cdf9c5f2770","modified":1601344849795},{"_id":"public/content.json","hash":"aecf76b6527cb839a098c41f6d161f00900596f6","modified":1601805750116},{"_id":"public/about/index.html","hash":"2d28226bdbc85de4d0f70d95dfa6eee5eb3b7d78","modified":1601805750116},{"_id":"public/categories/index.html","hash":"7758840e80e09a32a3e2d1f7c150474549567a7d","modified":1601806480931},{"_id":"public/music/index.html","hash":"1a6387bbccf48566c5c88895f052f1075b1728c6","modified":1601805750116},{"_id":"public/tags/index.html","hash":"d455d94059f848d37d9893926f99c01c0fef8295","modified":1601806480931},{"_id":"public/categories/个人博客/index.html","hash":"1e213488031e6004d2be178205ee191a37df54c3","modified":1601806480931},{"_id":"public/archives/index.html","hash":"611a80aef1845076463fbd87971143d9653380bb","modified":1601806480931},{"_id":"public/archives/2020/index.html","hash":"d5c908698101001f6d0b5526fc480b7cd955a4da","modified":1601806480931},{"_id":"public/archives/2020/01/index.html","hash":"b4933191a2c89953e9aa52cfd5123fdc7d851a62","modified":1601806480931},{"_id":"public/archives/2020/09/index.html","hash":"e6f077eb851308bdea1a449f447cc534c9ea999b","modified":1601806480931},{"_id":"public/index.html","hash":"eef02179c8c28bd27abb1428104552383c5c59cf","modified":1601806480931},{"_id":"public/tags/vue/index.html","hash":"7c94e1387ffe6d2c1ff31b90d25720f1a7d99f51","modified":1601806480931},{"_id":"public/tags/性能优化/index.html","hash":"08f8024e9eb2fafe65c83bf74cca4871598d71b5","modified":1601806480931},{"_id":"public/tags/vue性能优化/index.html","hash":"1778c652c1389245e4728d9fea0776c9c75b9d04","modified":1601806480931},{"_id":"public/tags/前端性能优化/index.html","hash":"53809513ef8c74c86b1d64fa51bd754401bb4427","modified":1601806480931},{"_id":"public/tags/hexo/index.html","hash":"7be37344fc073952349b891592f3c4a4d8df6cf1","modified":1601806480931},{"_id":"public/tags/github/index.html","hash":"42a33a374acd2a7de1405af73b52e7a9f0dbb71b","modified":1601806480931},{"_id":"public/2020/09/13/vue大型项目高性能优化-想说爱你真的不容易/index.html","hash":"dcecff2c0166e2d3bf44856541a92f7d58cf214a","modified":1601805750116},{"_id":"public/2020/01/09/程序员标配-使用hexo-github搭建个人博客/index.html","hash":"e207a0baa8760593d939e68b4e9aefbc0ec1b963","modified":1601805750116},{"_id":"public/CNAME","hash":"6b140ea1acea934e7cf6aff4e884a7ce3c2a628e","modified":1599965240956},{"_id":"public/favicon.ico","hash":"bbfe456d427483c27cda0bd10fec5cc1f848c1f1","modified":1599965240956},{"_id":"public/fancybox/blank.gif","hash":"4ffebfc1255c0da73aab342450a9ee09fcaccb86","modified":1599965240956},{"_id":"public/fancybox/fancybox_loading.gif","hash":"4fbaf63664f65a42bef60289c887cd61a925ce4c","modified":1599965240956},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"381e91e67e85bfda09ce8b88205d93d9a7d20d4d","modified":1599965240956},{"_id":"public/fancybox/fancybox_overlay.png","hash":"beb714da455e5dbdbf7b2ed466ff4308c103addb","modified":1599965240956},{"_id":"public/fancybox/fancybox_sprite.png","hash":"0657b6b574bafc4c819c7d6c3bc5dd7205c8eee7","modified":1599965240956},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"ecf1523aefe416a4cc901ab4cda5d488e3d9cd76","modified":1599965240956},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1599965240956},{"_id":"public/img/github-sprite.png","hash":"7e3ba97164323840fbe3a175b8535087ece93711","modified":1599965240956},{"_id":"public/img/glyphicons-halflings-white.png","hash":"3f6acfb147851b261f24b030a840b758c4667e26","modified":1599965240956},{"_id":"public/img/glyphicons-halflings.png","hash":"0b92d4a64699af327eff00b727f1aa46361debfa","modified":1599965240956},{"_id":"public/img/grid-18px-masked.png","hash":"2a5b89bc935f2a53870f8788b573971dc3ac7358","modified":1599965240956},{"_id":"public/img/grid-baseline-20px.png","hash":"f51efa3d9ee45c6053bb76244fdf7dd8967b7b6b","modified":1599965240956},{"_id":"public/css/fonts/Fixedsys500c.eot","hash":"49611cf2e4d7e5c489c191f994ba7ac315bcce5c","modified":1599965240956},{"_id":"public/css/fonts/Fixedsys500c.otf","hash":"e1fede43e072a990b9cd9899cdd26b78b30d305d","modified":1599965240956},{"_id":"public/css/fonts/Fixedsys500c.woff","hash":"21f8e34c5e252a54710c5f6b0e363b9c43f979b2","modified":1599965240956},{"_id":"public/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","hash":"1d9bb14c006d39d7eb0812a85567c7431f899b8d","modified":1599965240956},{"_id":"public/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","hash":"87deb174af2e2beebb9f09d618a5159ca299a3d0","modified":1599965240956},{"_id":"public/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","hash":"18dc51e642b4df958098d3bbc6d3ba0237ef6150","modified":1599965240956},{"_id":"public/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","hash":"d9f913d09bb3c25749daf8e7ab829c850a842929","modified":1599965240956},{"_id":"public/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","hash":"17a484b92c0dacc8e8b4f0d38ccc1db400819d1d","modified":1599965240956},{"_id":"public/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","hash":"e6c9f1e5a6a966a8f7250201356f351890a48921","modified":1599965240956},{"_id":"public/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","hash":"33225e85c33279e7b4f0c5c65ff93bec740dd59c","modified":1599965240956},{"_id":"public/favicon.png","hash":"3247c02b3e3516aca534bcfa7a7c34b30defa298","modified":1599965240956},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1599965240956},{"_id":"public/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1599965240956},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1599965240956},{"_id":"public/css/fonts/Fixedsys500c.ttf","hash":"19a8e49df8611dd0d90133a2eb0e410c23932db4","modified":1599965240956},{"_id":"public/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","hash":"f401d51152681048c06187c5d3919b1407b899c5","modified":1599965240956},{"_id":"public/css/fonts/Fixedsys500c.svg","hash":"584b95873e60ea5d4212dc42cb37f4643d3a1915","modified":1599965240956},{"_id":"public/css/google-fonts.css","hash":"06db66e315b47f844fb208b50e5710606360b142","modified":1599965240956},{"_id":"public/css/highlight.css","hash":"77c38f70b3f3e0a10ae24126f4561f7f2e4f025b","modified":1599965240956},{"_id":"public/css/responsive.css","hash":"30f6a26aa0a5368d24a68575eb3fe254de7b92d2","modified":1599965240956},{"_id":"public/css/style.css","hash":"7e619e043cfc365de01289f847b225fd24d2466c","modified":1599965240956},{"_id":"public/css/update-style.css","hash":"bbc67c8d72437b7b26ca2e477809c9baab2625d0","modified":1599965240956},{"_id":"public/fancybox/jquery.fancybox.css","hash":"cbb69ef9748bf92edc3eb4b269b77ad25465d049","modified":1599965240956},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"3eb6381d2ed4b706020e4be5aff024aab4bcabc5","modified":1599965240956},{"_id":"public/js/main.js","hash":"e3fcd795564533a3984b0ce327bd8dff44145f89","modified":1599965240956},{"_id":"public/js/gallery.js","hash":"10cad81731825178f3d30b80a2694a377c1fb7a6","modified":1599965240956},{"_id":"public/js/search.js","hash":"a882244488031de498176fc6af35cea2a13c7a18","modified":1599965240956},{"_id":"public/css/bootstrap-responsive.css","hash":"ea29a73addac5004ba4e7e4860e895cf15a5aa31","modified":1599965240956},{"_id":"public/css/font-awesome.css","hash":"180959029f82028c2100b7eeec7665412a49e588","modified":1599965240956},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1599965240956},{"_id":"public/js/bootstrap.min.js","hash":"5814e91bb6276f4de8b7951c965f2f190a03978d","modified":1599965240956},{"_id":"public/css/bootstrap.min.css","hash":"468c662a80ef582fa1ae492ebe5d415c9b275818","modified":1599965240956},{"_id":"public/js/jquery-2.0.3.min.js","hash":"28daf1b2a995cc4de81154a9a9ebdbb98f7c9997","modified":1599965240956},{"_id":"public/css/bootstrap.css.map","hash":"6925683e03d7cae9dc542bfcca38eccf6f66169c","modified":1599965240956},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"e471023286b7dd1d2ccc72f670a471cfdfeafab7","modified":1599965240956},{"_id":"public/baidusitemap.xml","hash":"c59204285dfeb8f8ab037e37cbc1f5b83cb28aca","modified":1601805750116},{"_id":"public/sitemap.xml","hash":"3f0350359e9bdf9144367bb669f9b079c8adf131","modified":1601805750116},{"_id":"themes/freemind/layout/_partial/post/gitalk.ejs","hash":"4a057cf93610995fa2ee95b939b70e832baadd12","modified":1601032846887},{"_id":"themes/freemind/layout/_partial/post/js/md5.min.js","hash":"36a2b1bd429c59433889ff1cbab1c128f016993c","modified":1601021212190},{"_id":"source/_posts/hexo博客添加gitalk评论系统.md","hash":"661eb21e4ba69d7f10bc109c1a4e27181d2f01f6","modified":1601344841731},{"_id":"public/2020/09/25/hexo博客添加gitalk评论系统/index.html","hash":"f29d53196dc5b0c92bdcbb503ac160b7bffd0de3","modified":1601805750116},{"_id":"public/tags/gitalk/index.html","hash":"4f9613566e338b007e777cebbb82199d9c1bf990","modified":1601806480931},{"_id":"themes/freemind/layout/_partial/site-visitor.ejs","hash":"1caad1b8535258914952deb5465a7bf4df7d8f06","modified":1601343440236},{"_id":"public/baidu_urls.txt","hash":"5b78c9bf38ba64952c660cb8650fd103557a9865","modified":1601805750116}],"Category":[{"name":"个人博客","_id":"ckf0hztms0004oouf545o9tec"}],"Data":[{"_id":"galleries","data":[{"name":"2017","cover":"https://img-blog.csdnimg.cn/20191201090129350.jpg","description":"2017年记录","photos":["https://img-blog.csdnimg.cn/20191201090129350.jpg","https://img-blog.csdnimg.cn/20200216200900531.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70"]}]}],"Page":[{"icon":"fa fa-user","title":"关于我","date":"2020-04-30T08:11:52.000Z","layout":"page","comments":0,"_content":"\n<!-- &emsp;&emsp;大家好，我是这个网站的```站长```，性别男，爱好写bug,毕业于一个垃圾三流本科，专业是电气工程及其自动化，对，没错，你可能会问我，为什么一个搞电器的最后干了程序员，我承认，我是从培训班学习的前端，很多同行都不会瞧不起培训班出身的程序员，嫌弃他们是速成班，学到的都是一些皮毛，业界流传着一个段子：```最后，那帮从培训班出去的程序员大部分都去了美团，少些人选择了百度，因为他们认为，美团的头盔比较好看，电动车骑着也会很拉风```。\n\n&emsp;&emsp;我想说请尊重每一个人，每个人都是有梦想的，或者是为了生活，选择了这个行业，请不要带着这种有色眼镜看待培训班出身的程序员。我到现在还记得在培训班学习的日子，因为我是零基础学的，之前一点没接触过这方面，在里边必须非常努力，不止是我，每个人在里边都很努力，一周上六天课，早起8点上课，晚上一般都是12点、1点睡觉。早起困了喝咖啡，晚上睡不着喝红酒。这样的日子持续了五个多月。\n\n&emsp;&emsp;很庆幸，最后我找到了工作，到现在为止已经干了两年了，在这两年中，我做了很多项目，有公司官网，app，后台管理，小程序，还有个基础服务，一直是前端负责人在带项目。这两年，我成长了很多。\n\n&emsp;&emsp;最近在学ts,node和mongo,未来我会学习flutter和react,关注前端前沿技术，不断充实自己。\n\n&emsp;&emsp;我希望看到这段话的人都不要放弃coding的日子，时刻保持学习的心态，踏实勤奋。可以说未来很美好，就看你把不把握现在的时光。\n\n<html>\n<div style=\"margin-left: 100%; transform: translate(-200px); width: 100%\">\n<h4>✎_____________落笔</h4>\n<h4>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;刘贵生</h4>\n<h4>&emsp;&emsp;&emsp;&emsp;&emsp;2020-4-30</h4>\n</div>\n</html>\n\n -->\n\n\n\n这是我的一些联系方式，希望一起交流学习。\n\n### 微信\n![image](https://img-blog.csdnimg.cn/20200430172357608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n### 微信公众号\n\n偶尔发发文章，分享一些前端资源\n\n![image](https://img-blog.csdnimg.cn/20191201090129350.jpg)\n\n### 微博\n\n![image](https://img-blog.csdnimg.cn/20200430173011376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n### github\n\n[地址](https://github.com/qisi007)\n\n### 博客园\n\n之前写的博客都在里边  [地址](https://www.cnblogs.com/qisi007/)\n\n\n","source":"about/index.md","raw":"---\nicon: fa fa-user\ntitle: 关于我\ndate: 2020-04-30 16:11:52\nlayout: page\ncomments: false\n---\n\n<!-- &emsp;&emsp;大家好，我是这个网站的```站长```，性别男，爱好写bug,毕业于一个垃圾三流本科，专业是电气工程及其自动化，对，没错，你可能会问我，为什么一个搞电器的最后干了程序员，我承认，我是从培训班学习的前端，很多同行都不会瞧不起培训班出身的程序员，嫌弃他们是速成班，学到的都是一些皮毛，业界流传着一个段子：```最后，那帮从培训班出去的程序员大部分都去了美团，少些人选择了百度，因为他们认为，美团的头盔比较好看，电动车骑着也会很拉风```。\n\n&emsp;&emsp;我想说请尊重每一个人，每个人都是有梦想的，或者是为了生活，选择了这个行业，请不要带着这种有色眼镜看待培训班出身的程序员。我到现在还记得在培训班学习的日子，因为我是零基础学的，之前一点没接触过这方面，在里边必须非常努力，不止是我，每个人在里边都很努力，一周上六天课，早起8点上课，晚上一般都是12点、1点睡觉。早起困了喝咖啡，晚上睡不着喝红酒。这样的日子持续了五个多月。\n\n&emsp;&emsp;很庆幸，最后我找到了工作，到现在为止已经干了两年了，在这两年中，我做了很多项目，有公司官网，app，后台管理，小程序，还有个基础服务，一直是前端负责人在带项目。这两年，我成长了很多。\n\n&emsp;&emsp;最近在学ts,node和mongo,未来我会学习flutter和react,关注前端前沿技术，不断充实自己。\n\n&emsp;&emsp;我希望看到这段话的人都不要放弃coding的日子，时刻保持学习的心态，踏实勤奋。可以说未来很美好，就看你把不把握现在的时光。\n\n<html>\n<div style=\"margin-left: 100%; transform: translate(-200px); width: 100%\">\n<h4>✎_____________落笔</h4>\n<h4>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;刘贵生</h4>\n<h4>&emsp;&emsp;&emsp;&emsp;&emsp;2020-4-30</h4>\n</div>\n</html>\n\n -->\n\n\n\n这是我的一些联系方式，希望一起交流学习。\n\n### 微信\n![image](https://img-blog.csdnimg.cn/20200430172357608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n### 微信公众号\n\n偶尔发发文章，分享一些前端资源\n\n![image](https://img-blog.csdnimg.cn/20191201090129350.jpg)\n\n### 微博\n\n![image](https://img-blog.csdnimg.cn/20200430173011376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n### github\n\n[地址](https://github.com/qisi007)\n\n### 博客园\n\n之前写的博客都在里边  [地址](https://www.cnblogs.com/qisi007/)\n\n\n","updated":"2020-09-13T02:38:45.245Z","path":"about/index.html","_id":"ckf0hztmo0001oouf5i5phbyv","content":"<!-- &emsp;&emsp;大家好，我是这个网站的```站长```，性别男，爱好写bug,毕业于一个垃圾三流本科，专业是电气工程及其自动化，对，没错，你可能会问我，为什么一个搞电器的最后干了程序员，我承认，我是从培训班学习的前端，很多同行都不会瞧不起培训班出身的程序员，嫌弃他们是速成班，学到的都是一些皮毛，业界流传着一个段子：```最后，那帮从培训班出去的程序员大部分都去了美团，少些人选择了百度，因为他们认为，美团的头盔比较好看，电动车骑着也会很拉风```。\n\n&emsp;&emsp;我想说请尊重每一个人，每个人都是有梦想的，或者是为了生活，选择了这个行业，请不要带着这种有色眼镜看待培训班出身的程序员。我到现在还记得在培训班学习的日子，因为我是零基础学的，之前一点没接触过这方面，在里边必须非常努力，不止是我，每个人在里边都很努力，一周上六天课，早起8点上课，晚上一般都是12点、1点睡觉。早起困了喝咖啡，晚上睡不着喝红酒。这样的日子持续了五个多月。\n\n&emsp;&emsp;很庆幸，最后我找到了工作，到现在为止已经干了两年了，在这两年中，我做了很多项目，有公司官网，app，后台管理，小程序，还有个基础服务，一直是前端负责人在带项目。这两年，我成长了很多。\n\n&emsp;&emsp;最近在学ts,node和mongo,未来我会学习flutter和react,关注前端前沿技术，不断充实自己。\n\n&emsp;&emsp;我希望看到这段话的人都不要放弃coding的日子，时刻保持学习的心态，踏实勤奋。可以说未来很美好，就看你把不把握现在的时光。\n\n<html>\n<div style=\"margin-left: 100%; transform: translate(-200px); width: 100%\">\n<h4>✎_____________落笔</h4>\n<h4>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;刘贵生</h4>\n<h4>&emsp;&emsp;&emsp;&emsp;&emsp;2020-4-30</h4>\n</div>\n</html>\n\n -->\n\n\n\n<p>这是我的一些联系方式，希望一起交流学习。</p>\n<h3 id=\"微信\"><a href=\"#微信\" class=\"headerlink\" title=\"微信\"></a>微信</h3><p><img src=\"https://img-blog.csdnimg.cn/20200430172357608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<h3 id=\"微信公众号\"><a href=\"#微信公众号\" class=\"headerlink\" title=\"微信公众号\"></a>微信公众号</h3><p>偶尔发发文章，分享一些前端资源</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191201090129350.jpg\" alt=\"image\"></p>\n<h3 id=\"微博\"><a href=\"#微博\" class=\"headerlink\" title=\"微博\"></a>微博</h3><p><img src=\"https://img-blog.csdnimg.cn/20200430173011376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<h3 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h3><p><a href=\"https://github.com/qisi007\">地址</a></p>\n<h3 id=\"博客园\"><a href=\"#博客园\" class=\"headerlink\" title=\"博客园\"></a>博客园</h3><p>之前写的博客都在里边  <a href=\"https://www.cnblogs.com/qisi007/\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n","site":{"data":{"galleries":[{"name":"2017","cover":"https://img-blog.csdnimg.cn/20191201090129350.jpg","description":"2017年记录","photos":["https://img-blog.csdnimg.cn/20191201090129350.jpg","https://img-blog.csdnimg.cn/20200216200900531.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70"]}]}},"excerpt":"这是我的一些联系方式，希望一起交流学习。\n\n微信\n\n\n微信公众号\n偶尔发发文章，分享一些前端资源\n\n\n\n微博\n\n\ngithub\n地址\n\n博客园\n之前写的博客都在里边 地址","more":"<!-- &emsp;&emsp;大家好，我是这个网站的```站长```，性别男，爱好写bug,毕业于一个垃圾三流本科，专业是电气工程及其自动化，对，没错，你可能会问我，为什么一个搞电器的最后干了程序员，我承认，我是从培训班学习的前端，很多同行都不会瞧不起培训班出身的程序员，嫌弃他们是速成班，学到的都是一些皮毛，业界流传着一个段子：```最后，那帮从培训班出去的程序员大部分都去了美团，少些人选择了百度，因为他们认为，美团的头盔比较好看，电动车骑着也会很拉风```。\n\n&emsp;&emsp;我想说请尊重每一个人，每个人都是有梦想的，或者是为了生活，选择了这个行业，请不要带着这种有色眼镜看待培训班出身的程序员。我到现在还记得在培训班学习的日子，因为我是零基础学的，之前一点没接触过这方面，在里边必须非常努力，不止是我，每个人在里边都很努力，一周上六天课，早起8点上课，晚上一般都是12点、1点睡觉。早起困了喝咖啡，晚上睡不着喝红酒。这样的日子持续了五个多月。\n\n&emsp;&emsp;很庆幸，最后我找到了工作，到现在为止已经干了两年了，在这两年中，我做了很多项目，有公司官网，app，后台管理，小程序，还有个基础服务，一直是前端负责人在带项目。这两年，我成长了很多。\n\n&emsp;&emsp;最近在学ts,node和mongo,未来我会学习flutter和react,关注前端前沿技术，不断充实自己。\n\n&emsp;&emsp;我希望看到这段话的人都不要放弃coding的日子，时刻保持学习的心态，踏实勤奋。可以说未来很美好，就看你把不把握现在的时光。\n\n<html>\n<div style=\"margin-left: 100%; transform: translate(-200px); width: 100%\">\n<h4>✎_____________落笔</h4>\n<h4>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;刘贵生</h4>\n<h4>&emsp;&emsp;&emsp;&emsp;&emsp;2020-4-30</h4>\n</div>\n</html>\n\n -->\n\n\n\n<p>这是我的一些联系方式，希望一起交流学习。</p>\n<h3 id=\"微信\"><a href=\"#微信\" class=\"headerlink\" title=\"微信\"></a>微信</h3><p><img src=\"https://img-blog.csdnimg.cn/20200430172357608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<h3 id=\"微信公众号\"><a href=\"#微信公众号\" class=\"headerlink\" title=\"微信公众号\"></a>微信公众号</h3><p>偶尔发发文章，分享一些前端资源</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191201090129350.jpg\" alt=\"image\"></p>\n<h3 id=\"微博\"><a href=\"#微博\" class=\"headerlink\" title=\"微博\"></a>微博</h3><p><img src=\"https://img-blog.csdnimg.cn/20200430173011376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<h3 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h3><p><a href=\"https://github.com/qisi007\">地址</a></p>\n<h3 id=\"博客园\"><a href=\"#博客园\" class=\"headerlink\" title=\"博客园\"></a>博客园</h3><p>之前写的博客都在里边  <a href=\"https://www.cnblogs.com/qisi007/\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n"},{"title":"分类","date":"2020-04-28T08:46:27.000Z","type":"categories","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-04-28 16:46:27\ntype: \"categories\"\nlayout: \"categories\"\ncomments: false\n---\n","updated":"2020-09-13T02:35:50.352Z","path":"categories/index.html","_id":"ckf0hztmq0003oouffvy3eyu7","content":"","site":{"data":{"galleries":[{"name":"2017","cover":"https://img-blog.csdnimg.cn/20191201090129350.jpg","description":"2017年记录","photos":["https://img-blog.csdnimg.cn/20191201090129350.jpg","https://img-blog.csdnimg.cn/20200216200900531.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70"]}]}},"excerpt":"","more":""},{"icon":"fa fa-music","title":"网易云歌单","date":"2020-04-30T10:05:29.000Z","layout":"page","comments":0,"_content":"\n<html>\n    网易云音乐ID: 大帅比鸭吼\n    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" style=\"width:600px;height:700px;margin-left:50%;transform:translate(-300px);\" src=\"//music.163.com/outchain/player?type=0&id=2050354045&auto=1&height=430\"></iframe>\n</html>\n\n","source":"music/index.md","raw":"---\nicon: fa fa-music\ntitle: 网易云歌单\ndate: 2020-04-30 18:05:29\nlayout: page\ncomments: false\n---\n\n<html>\n    网易云音乐ID: 大帅比鸭吼\n    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" style=\"width:600px;height:700px;margin-left:50%;transform:translate(-300px);\" src=\"//music.163.com/outchain/player?type=0&id=2050354045&auto=1&height=430\"></iframe>\n</html>\n\n","updated":"2020-09-30T02:06:16.483Z","path":"music/index.html","_id":"ckf0hztmu0006ooufetty5a3x","content":"<html>\n    网易云音乐ID: 大帅比鸭吼\n    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" style=\"width:600px;height:700px;margin-left:50%;transform:translate(-300px);\" src=\"//music.163.com/outchain/player?type=0&id=2050354045&auto=1&height=430\"></iframe>\n</html>\n\n","site":{"data":{"galleries":[{"name":"2017","cover":"https://img-blog.csdnimg.cn/20191201090129350.jpg","description":"2017年记录","photos":["https://img-blog.csdnimg.cn/20191201090129350.jpg","https://img-blog.csdnimg.cn/20200216200900531.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70"]}]}},"excerpt":"网易云音乐ID: 大帅比鸭吼","more":"<html>\n    网易云音乐ID: 大帅比鸭吼\n    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" style=\"width:600px;height:700px;margin-left:50%;transform:translate(-300px);\" src=\"//music.163.com/outchain/player?type=0&id=2050354045&auto=1&height=430\"></iframe>\n</html>\n\n"},{"title":"标签","date":"2020-04-28T09:15:54.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-04-28 17:15:54\ntype: \"tags\" \nlayout: \"tags\" \n---\n","updated":"2020-09-13T02:35:50.353Z","path":"tags/index.html","comments":1,"_id":"ckf0hztmw0007ooufca008uxi","content":"","site":{"data":{"galleries":[{"name":"2017","cover":"https://img-blog.csdnimg.cn/20191201090129350.jpg","description":"2017年记录","photos":["https://img-blog.csdnimg.cn/20191201090129350.jpg","https://img-blog.csdnimg.cn/20200216200900531.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70"]}]}},"excerpt":"","more":""}],"Post":[{"title":"想说爱你不容易--vue大型项目高性能优化","date":"2020-09-13T02:40:59.000Z","preview":100,"toc":true,"_content":"\n## 一、背景\n\n&emsp;&emsp;目前公司的```电子合同```采用```表单设计器```+```合同业务```配合实现，做了半年多后终于上线，但是下边员工普遍反映卡顿，甚至卡死，爆栈。尤其是新增和修改合同页面，因为这部分数据量大，逻辑复杂，很容易崩溃，所以决定进行性能优化。\n\n## 二、业务场景介绍\n\n&emsp;&emsp;先来了解一下我们是怎么实现：\n\n&emsp;&emsp;1. 因为我们公司合同变换频繁，条款之间还有逻辑，所以做了个```基础服务```（说白了就是组件库），为合同提供模板\n\n&emsp;&emsp;2. 表单设计器作为基础服务，打包成了组件库，嵌入到合同项目，包括合同生成组件（拖拽生成合同模板）和合同预览组件（加载数据库中的合同模板数据）\n\n&emsp;&emsp;3. 合同项目有一个模块管理页面，可以对多个模板进行维护，比如可以选择启用哪个模板。\n\n&emsp;&emsp;4. 合同的管理员负责维护模板，可以用表单设计器拖拽生成合同模板，提交后落入数据库，每个合同类型可以同时启用一个模板。\n\n&emsp;&emsp;5. 最终下边员工用的就是启用的模板（尤其是这部门卡顿） \n\n**下面是电子合同的宏观泳道图：**\n![image](https://img-blog.csdnimg.cn/20200216200900531.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n ## 三、页面介绍\n 1. 合同模板管理页\n ![image](https://img-blog.csdnimg.cn/20200910105834157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n 2. 新增模板页面\n ![image](https://img-blog.csdnimg.cn/20200910105956622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n 3. 新建合同页面\n![image](https://img-blog.csdnimg.cn/202009101101566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n 4. 合同填写页面\n ![image](https://img-blog.csdnimg.cn/20200911134425140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n \n&emsp;&emsp;好了，基本的业务逻辑和页面就介绍这么多，特别卡顿的页面就是第四个页面，下面我们分析一下卡顿的原因。\n\n ## 四、卡顿分析\n\n&emsp;&emsp;1. 首先就是表单设计器的问题最严重，因为每一个组件需要很多配置项才能够支撑组件的渲染，而一个合同是由上千个组件组成，经过测试，一个合同模板需要5MB的存储空间(数据库用的是MongoDB，存储格式为字符串，几乎不影响)，下面是一个输入框的配置\n\n![image](https://img-blog.csdnimg.cn/20200910103459458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n&emsp;&emsp;2. 表单设计器的实现用了大量的闭包管理业务，我们都知道，闭包是特别耗内存的。\n\n&emsp;&emsp;3. 合同模板巨复杂，由上万个组件拼接而成，我把模板数据down下来看了一下，大约是16000多个组件，大小为3.4MB。\n\n&emsp;&emsp;4. 因为表单设计器中包括```id,model,事件id```都是前端随机生成的，采用```随机字符串+时间戳```的形式，一共46位。\n\n&emsp;&emsp;5. 合同项目属于大型项目，业务场景及其复杂，包括合同管理，附件管理，合同列表，新增页面，审批页面等等，我计算了一下，光路由页面就有三十多个，```页面，组件，样式,业务```巨多，如果不做处理，不卡才怪\n \n\n\n## 五、性能优化\n#### 1. 第一次尝试\n&emsp;&emsp;说一下我的优化思路：首先，电子合同由表单设计器和合同业务两个项目共同完成，合同模板加载慢的原因是浏览器渲染了大量的模板数据，这些模板数据是由多个组组成的（大约12个），我第一想到的就是```分组渲染```，先加载一个组，先让用户看到页面，然后在继续加载，一个一个,最终加载完成。这也是被大家认可的方案。\n\n&emsp;&emsp;然后我就开始实现这个分组渲染，做了大概有二十多天吧，一点效果没出来。\n\n&emsp;&emsp;先看一下渲染的代码：\n```\n<template v-show=\"itemManage==='group'\">\n  <preview-item-template v-for=\"(item) in domainNodeList\"\n                        :key=\"item.id\"\n                        :formNode=\"item\"\n                        :parent=\"domainNodeList\">\n  </preview-item-template>\n</template>\n```\n&emsp;&emsp;上面就是所有组加载的代码，这是一个```v-for```,做分组渲染，我想到使用```vue的异步组件```实现，但是这是一个循环，所有的组件注册的都是同一个名字，这显然是不能用异步组件的，除非注册的是不同名字的组件，但是我想了很长时间都做出来效果，所以这二十多天，失败了。\n\n#### 2.第二次尝试\n&emsp;&emsp;上边说了，模板加载慢是因为浏览器渲染了大量的数据，我们知道，js是单线程的，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。因此js处理数据的能力有限，所以在朋友的建议下调研了一把```webworker```。\n\n&emsp;&emsp;webworker的作用，就是为js创造多线程环境，允许主线程创建Worker线程，将一些任务分配给后者运行。在主线程运行的同时，Worker线程在后台运行，两者互不干扰。\n\n&emsp;&emsp;看了一把文档我第一时间觉得这个方案不可行。说到底我们就是想要webworker为我们开辟县城用来处理大量数据，但是webworker处理的大数据，不是指数据量非常大，而是要从计算量来看，通常用时不能控制在毫秒级内的运算都可以考虑放在web worker中执行。而我们的合同模板数据恰恰是数据量大，并不需要做特别大的运算。\n\n&emsp;&emsp;第二次尝试失败。\n\n#### 3.第三次尝试\n\n&emsp;&emsp;后来在同事的建议下决定采用```ssr```,也就是```服务端预渲染```。我们平常写的vue项目打包后生成```dist```,运维会把这个文件夹放在服务器中，我们看到的页面其实就是生成执行的```render函数```，这是比较耗时的。\n\n&emsp;&emsp;所谓的服务端渲染，就是在```服务端```生成静态页面，然后交给```客户端```渲染。\n\n&emsp;&emsp;自己从零搭建一套服务端渲染的应用是相当复杂的，所以我最终选用了```nuxt```框架。关于nuxt框架我不多做介绍，可以自己去看文档[（传送门）](https://nuxtjs.org/)。这个框架有自己的脚手架，也是vue官方推荐的。\n\n&emsp;&emsp;经过了一周的时间，完成了从vue向nuxt的迁移，大部门页面速度有了明显的提升。\n\n&emsp;&emsp;**除了我们想优化的新增合同页面。**\n\n&emsp;&emsp;经过分析，合同项目用到的组件库有```element-UI```和我问自己的表单设计器，element只有部门组件支持ssr，像是```表格和树```是不支持ssr的，所以就不存在服务端渲染了。\n\n&emsp;&emsp;我也曾尝试过弄一把表单设计器，让它支持ssr，但是并没有效果，如果有谁知道，可以联系我。\n\n&emsp;&emsp;很显然，第三次也失败了。\n\n#### 4.第四次尝试\n\n&emsp;&emsp;命运总是很捉弄人，优化了一个多月的合同，速度并没有显著的提升，领导很着急，我也很着急。\n\n&emsp;&emsp;突然有一天，我在回家的途中，记得那天风雨交加，雷霆大作，一声巨雷轰天响，把我好的idea都劈出来了。我一下子想到了分组加载的实现。\n\n先来看一把代码的实现（只展示了部分代码）：\n\n\n```\n<template>\n  <div class=\"dialog-preview\" v-show=\"!formLoading\">\n      <el-form  ref=\"previewForm\" onsubmit=\"return false\"\n                :size=\"formSettingState.componentSize\"\n                @hook:mounted=\"formMounted\"\n                :model=\"formModels\">\n\n        <template v-show=\"itemManage==='group'\">\n          <preview-item-template v-for=\"(item) in cutDomainNodeList.one\"\n                                :key=\"item.id\"\n                                :formNode=\"item\"\n                                :parent=\"cutDomainNodeList.one\">\n          </preview-item-template>\n        </template>\n        <template v-if=\"itemManage==='group' && formLoadingTwo\">\n          <preview-item-template v-for=\"(item) in cutDomainNodeList.two\"\n                                :key=\"item.id\"\n                                :formNode=\"item\"\n                                :parent=\"cutDomainNodeList.two\">\n          </preview-item-template>\n        </template>\n         <template v-if=\"itemManage==='group' && formLoadingThree\">\n          <preview-item-template v-for=\"(item) in cutDomainNodeList.three\"\n                                :key=\"item.id\"\n                                :formNode=\"item\"\n                                :parent=\"cutDomainNodeList.three\">\n          </preview-item-template>\n        </template>\n        </template>\n      </el-form>\n  </div>\n</template>\n<script>\nexport default {\n    data() {\n        return {\n          formLoading: true,\n          formLoadingTwo: false,\n          formLoadingThree: false\n        }\n    },\n    computed: {\n        cutDomainNodeList () {\n          let { domainNodeList } = this;\n          let length = domainNodeList.length;\n          if ( length <= 4 ) {\n            return {\n              one: domainNodeList\n            }\n          }else {\n            return {\n              one: domainNodeList.filter((el, index) => index <=2 ),\n              two: domainNodeList.filter((el, index) => index>2 && index <=5 ),\n              three: domainNodeList.filter((el, index ) => index > 5)\n            }\n        }\n    },\n    methods: {\n        formMounted () {\n          setTimeout(() => { this.formLoading = false },  500);\n          setTimeout(() => { this.formLoadingTwo = true },  700);\n          setTimeout(() => { this.formLoadingThree = true},  900);\n        }\n    }\n}\n```\n**分块加载实现思路：**\n\n&emsp;&emsp; 1. 首先我把模板数据这个list利用计算属性先做了个判断，如果数组长度小于4，证明数据量较小，不需要分块加载，如果大于4证明数据量大，需要进行分块加载\n\n&emsp;&emsp; 2. 分块加载是根据数组索引过滤的，第一块是0-2组，第二块是2-5组，第三块是索引大于5的（也可以分割的跟细），然后再页面中分别遍历渲染\n\n&emsp;&emsp; 3. 看一下```html```中的```el-form```这个标签，里边有个```@hook:mounted=\"formMounted\"```这句话，```@hook:```+```生命周期```代表在这个生命周期时执行，我们等```mounted```执行完延时500mm开始加载第一块，700mm加载第二块，900毫秒加载第三块，这样分块加载的效果就出来了。\n\n## 六、其他方面优化\n\n&emsp;&emsp;  首先添加了骨架屏组件，让用户在等待的时候能看到过渡效果。\n\n&emsp;&emsp; 上面提到，合同模板大约在```3.4MB```，这个就是个纯```json```,让浏览器一下子加载这个么大的数据难免卡顿，所以我就在想能不能优化一下模板大小，从而能够提升加载速度。\n\n&emsp;&emsp; 表单设计器中包括```id,model,事件id```都是前端随机生成的，采用```随机字符串+时间戳```的形式，一共46位，一个英文字符就是一个字节，这就是46个字节，所以我们可以缩短一下随机数的长度，从而减少一下模板大小。\n\n&emsp;&emsp; 最终选用了26位随机数，我算了一下，大约能减少一半大小。\n\n&emsp;&emsp; 后来我们让测试人员新生成了一个模板，果然，新模板大小```1.44MB```，缩短了一倍还多。\n\n&emsp;&emsp; 其他方面，我们知道表单设计器有些配置做的不到位，所以管理员不得不换个别的方式拖拽模板，所以我们加了一些配置项，从而使管理员可以少拖拽一些组件。这部分优化下来，模板大小大约减少了```300多kb```.\n\n&emsp;&emsp; 我们还可以优化一下表单设计器的代码，把闭包换个实现方式，应该也能提高加载速度，后续会做这些。\n\n&emsp;&emsp; 合同业务项目也优化了一些接口，代码，前后端交互方式，以及页面的交互方式提高了性能和视觉效果。\n\n\n## 七、总结\n\n&emsp;&emsp; 这是我第一次费这么大劲做vue项目的性能优化，虽然坎坷，但也留下了好结果，我们从最初加载需要50秒甚至一分钟，到现在10秒左右就能加载成功，速度提高可近5倍。\n\n&emsp;&emsp; 整体效果如下：\n![image](https://qjprod-images.oss-cn-beijing.aliyuncs.com/menuResource/1600564965755?name=111.gif)\n\n&emsp;&emsp; 今日成果，虽数月，但众人拾柴，得以燎原，此非一人之功，谢而不及。\n\n\n\n\n\n\n","source":"_posts/vue大型项目高性能优化-想说爱你真的不容易.md","raw":"---\ntitle: 想说爱你不容易--vue大型项目高性能优化\ndate: 2020-09-13 10:40:59\ncategories: 个人博客\ntags:\n - vue\n - 性能优化\n - vue性能优化\n - 前端性能优化\npreview: 100\ntoc: true\n---\n\n## 一、背景\n\n&emsp;&emsp;目前公司的```电子合同```采用```表单设计器```+```合同业务```配合实现，做了半年多后终于上线，但是下边员工普遍反映卡顿，甚至卡死，爆栈。尤其是新增和修改合同页面，因为这部分数据量大，逻辑复杂，很容易崩溃，所以决定进行性能优化。\n\n## 二、业务场景介绍\n\n&emsp;&emsp;先来了解一下我们是怎么实现：\n\n&emsp;&emsp;1. 因为我们公司合同变换频繁，条款之间还有逻辑，所以做了个```基础服务```（说白了就是组件库），为合同提供模板\n\n&emsp;&emsp;2. 表单设计器作为基础服务，打包成了组件库，嵌入到合同项目，包括合同生成组件（拖拽生成合同模板）和合同预览组件（加载数据库中的合同模板数据）\n\n&emsp;&emsp;3. 合同项目有一个模块管理页面，可以对多个模板进行维护，比如可以选择启用哪个模板。\n\n&emsp;&emsp;4. 合同的管理员负责维护模板，可以用表单设计器拖拽生成合同模板，提交后落入数据库，每个合同类型可以同时启用一个模板。\n\n&emsp;&emsp;5. 最终下边员工用的就是启用的模板（尤其是这部门卡顿） \n\n**下面是电子合同的宏观泳道图：**\n![image](https://img-blog.csdnimg.cn/20200216200900531.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n ## 三、页面介绍\n 1. 合同模板管理页\n ![image](https://img-blog.csdnimg.cn/20200910105834157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n 2. 新增模板页面\n ![image](https://img-blog.csdnimg.cn/20200910105956622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n 3. 新建合同页面\n![image](https://img-blog.csdnimg.cn/202009101101566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n 4. 合同填写页面\n ![image](https://img-blog.csdnimg.cn/20200911134425140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n \n&emsp;&emsp;好了，基本的业务逻辑和页面就介绍这么多，特别卡顿的页面就是第四个页面，下面我们分析一下卡顿的原因。\n\n ## 四、卡顿分析\n\n&emsp;&emsp;1. 首先就是表单设计器的问题最严重，因为每一个组件需要很多配置项才能够支撑组件的渲染，而一个合同是由上千个组件组成，经过测试，一个合同模板需要5MB的存储空间(数据库用的是MongoDB，存储格式为字符串，几乎不影响)，下面是一个输入框的配置\n\n![image](https://img-blog.csdnimg.cn/20200910103459458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n&emsp;&emsp;2. 表单设计器的实现用了大量的闭包管理业务，我们都知道，闭包是特别耗内存的。\n\n&emsp;&emsp;3. 合同模板巨复杂，由上万个组件拼接而成，我把模板数据down下来看了一下，大约是16000多个组件，大小为3.4MB。\n\n&emsp;&emsp;4. 因为表单设计器中包括```id,model,事件id```都是前端随机生成的，采用```随机字符串+时间戳```的形式，一共46位。\n\n&emsp;&emsp;5. 合同项目属于大型项目，业务场景及其复杂，包括合同管理，附件管理，合同列表，新增页面，审批页面等等，我计算了一下，光路由页面就有三十多个，```页面，组件，样式,业务```巨多，如果不做处理，不卡才怪\n \n\n\n## 五、性能优化\n#### 1. 第一次尝试\n&emsp;&emsp;说一下我的优化思路：首先，电子合同由表单设计器和合同业务两个项目共同完成，合同模板加载慢的原因是浏览器渲染了大量的模板数据，这些模板数据是由多个组组成的（大约12个），我第一想到的就是```分组渲染```，先加载一个组，先让用户看到页面，然后在继续加载，一个一个,最终加载完成。这也是被大家认可的方案。\n\n&emsp;&emsp;然后我就开始实现这个分组渲染，做了大概有二十多天吧，一点效果没出来。\n\n&emsp;&emsp;先看一下渲染的代码：\n```\n<template v-show=\"itemManage==='group'\">\n  <preview-item-template v-for=\"(item) in domainNodeList\"\n                        :key=\"item.id\"\n                        :formNode=\"item\"\n                        :parent=\"domainNodeList\">\n  </preview-item-template>\n</template>\n```\n&emsp;&emsp;上面就是所有组加载的代码，这是一个```v-for```,做分组渲染，我想到使用```vue的异步组件```实现，但是这是一个循环，所有的组件注册的都是同一个名字，这显然是不能用异步组件的，除非注册的是不同名字的组件，但是我想了很长时间都做出来效果，所以这二十多天，失败了。\n\n#### 2.第二次尝试\n&emsp;&emsp;上边说了，模板加载慢是因为浏览器渲染了大量的数据，我们知道，js是单线程的，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。因此js处理数据的能力有限，所以在朋友的建议下调研了一把```webworker```。\n\n&emsp;&emsp;webworker的作用，就是为js创造多线程环境，允许主线程创建Worker线程，将一些任务分配给后者运行。在主线程运行的同时，Worker线程在后台运行，两者互不干扰。\n\n&emsp;&emsp;看了一把文档我第一时间觉得这个方案不可行。说到底我们就是想要webworker为我们开辟县城用来处理大量数据，但是webworker处理的大数据，不是指数据量非常大，而是要从计算量来看，通常用时不能控制在毫秒级内的运算都可以考虑放在web worker中执行。而我们的合同模板数据恰恰是数据量大，并不需要做特别大的运算。\n\n&emsp;&emsp;第二次尝试失败。\n\n#### 3.第三次尝试\n\n&emsp;&emsp;后来在同事的建议下决定采用```ssr```,也就是```服务端预渲染```。我们平常写的vue项目打包后生成```dist```,运维会把这个文件夹放在服务器中，我们看到的页面其实就是生成执行的```render函数```，这是比较耗时的。\n\n&emsp;&emsp;所谓的服务端渲染，就是在```服务端```生成静态页面，然后交给```客户端```渲染。\n\n&emsp;&emsp;自己从零搭建一套服务端渲染的应用是相当复杂的，所以我最终选用了```nuxt```框架。关于nuxt框架我不多做介绍，可以自己去看文档[（传送门）](https://nuxtjs.org/)。这个框架有自己的脚手架，也是vue官方推荐的。\n\n&emsp;&emsp;经过了一周的时间，完成了从vue向nuxt的迁移，大部门页面速度有了明显的提升。\n\n&emsp;&emsp;**除了我们想优化的新增合同页面。**\n\n&emsp;&emsp;经过分析，合同项目用到的组件库有```element-UI```和我问自己的表单设计器，element只有部门组件支持ssr，像是```表格和树```是不支持ssr的，所以就不存在服务端渲染了。\n\n&emsp;&emsp;我也曾尝试过弄一把表单设计器，让它支持ssr，但是并没有效果，如果有谁知道，可以联系我。\n\n&emsp;&emsp;很显然，第三次也失败了。\n\n#### 4.第四次尝试\n\n&emsp;&emsp;命运总是很捉弄人，优化了一个多月的合同，速度并没有显著的提升，领导很着急，我也很着急。\n\n&emsp;&emsp;突然有一天，我在回家的途中，记得那天风雨交加，雷霆大作，一声巨雷轰天响，把我好的idea都劈出来了。我一下子想到了分组加载的实现。\n\n先来看一把代码的实现（只展示了部分代码）：\n\n\n```\n<template>\n  <div class=\"dialog-preview\" v-show=\"!formLoading\">\n      <el-form  ref=\"previewForm\" onsubmit=\"return false\"\n                :size=\"formSettingState.componentSize\"\n                @hook:mounted=\"formMounted\"\n                :model=\"formModels\">\n\n        <template v-show=\"itemManage==='group'\">\n          <preview-item-template v-for=\"(item) in cutDomainNodeList.one\"\n                                :key=\"item.id\"\n                                :formNode=\"item\"\n                                :parent=\"cutDomainNodeList.one\">\n          </preview-item-template>\n        </template>\n        <template v-if=\"itemManage==='group' && formLoadingTwo\">\n          <preview-item-template v-for=\"(item) in cutDomainNodeList.two\"\n                                :key=\"item.id\"\n                                :formNode=\"item\"\n                                :parent=\"cutDomainNodeList.two\">\n          </preview-item-template>\n        </template>\n         <template v-if=\"itemManage==='group' && formLoadingThree\">\n          <preview-item-template v-for=\"(item) in cutDomainNodeList.three\"\n                                :key=\"item.id\"\n                                :formNode=\"item\"\n                                :parent=\"cutDomainNodeList.three\">\n          </preview-item-template>\n        </template>\n        </template>\n      </el-form>\n  </div>\n</template>\n<script>\nexport default {\n    data() {\n        return {\n          formLoading: true,\n          formLoadingTwo: false,\n          formLoadingThree: false\n        }\n    },\n    computed: {\n        cutDomainNodeList () {\n          let { domainNodeList } = this;\n          let length = domainNodeList.length;\n          if ( length <= 4 ) {\n            return {\n              one: domainNodeList\n            }\n          }else {\n            return {\n              one: domainNodeList.filter((el, index) => index <=2 ),\n              two: domainNodeList.filter((el, index) => index>2 && index <=5 ),\n              three: domainNodeList.filter((el, index ) => index > 5)\n            }\n        }\n    },\n    methods: {\n        formMounted () {\n          setTimeout(() => { this.formLoading = false },  500);\n          setTimeout(() => { this.formLoadingTwo = true },  700);\n          setTimeout(() => { this.formLoadingThree = true},  900);\n        }\n    }\n}\n```\n**分块加载实现思路：**\n\n&emsp;&emsp; 1. 首先我把模板数据这个list利用计算属性先做了个判断，如果数组长度小于4，证明数据量较小，不需要分块加载，如果大于4证明数据量大，需要进行分块加载\n\n&emsp;&emsp; 2. 分块加载是根据数组索引过滤的，第一块是0-2组，第二块是2-5组，第三块是索引大于5的（也可以分割的跟细），然后再页面中分别遍历渲染\n\n&emsp;&emsp; 3. 看一下```html```中的```el-form```这个标签，里边有个```@hook:mounted=\"formMounted\"```这句话，```@hook:```+```生命周期```代表在这个生命周期时执行，我们等```mounted```执行完延时500mm开始加载第一块，700mm加载第二块，900毫秒加载第三块，这样分块加载的效果就出来了。\n\n## 六、其他方面优化\n\n&emsp;&emsp;  首先添加了骨架屏组件，让用户在等待的时候能看到过渡效果。\n\n&emsp;&emsp; 上面提到，合同模板大约在```3.4MB```，这个就是个纯```json```,让浏览器一下子加载这个么大的数据难免卡顿，所以我就在想能不能优化一下模板大小，从而能够提升加载速度。\n\n&emsp;&emsp; 表单设计器中包括```id,model,事件id```都是前端随机生成的，采用```随机字符串+时间戳```的形式，一共46位，一个英文字符就是一个字节，这就是46个字节，所以我们可以缩短一下随机数的长度，从而减少一下模板大小。\n\n&emsp;&emsp; 最终选用了26位随机数，我算了一下，大约能减少一半大小。\n\n&emsp;&emsp; 后来我们让测试人员新生成了一个模板，果然，新模板大小```1.44MB```，缩短了一倍还多。\n\n&emsp;&emsp; 其他方面，我们知道表单设计器有些配置做的不到位，所以管理员不得不换个别的方式拖拽模板，所以我们加了一些配置项，从而使管理员可以少拖拽一些组件。这部分优化下来，模板大小大约减少了```300多kb```.\n\n&emsp;&emsp; 我们还可以优化一下表单设计器的代码，把闭包换个实现方式，应该也能提高加载速度，后续会做这些。\n\n&emsp;&emsp; 合同业务项目也优化了一些接口，代码，前后端交互方式，以及页面的交互方式提高了性能和视觉效果。\n\n\n## 七、总结\n\n&emsp;&emsp; 这是我第一次费这么大劲做vue项目的性能优化，虽然坎坷，但也留下了好结果，我们从最初加载需要50秒甚至一分钟，到现在10秒左右就能加载成功，速度提高可近5倍。\n\n&emsp;&emsp; 整体效果如下：\n![image](https://qjprod-images.oss-cn-beijing.aliyuncs.com/menuResource/1600564965755?name=111.gif)\n\n&emsp;&emsp; 今日成果，虽数月，但众人拾柴，得以燎原，此非一人之功，谢而不及。\n\n\n\n\n\n\n","slug":"vue大型项目高性能优化-想说爱你真的不容易","published":1,"updated":"2020-09-20T03:05:39.577Z","_id":"ckf0hztmh0000oouf312l2yz5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h2><p>&emsp;&emsp;目前公司的<code>电子合同</code>采用<code>表单设计器</code>+<code>合同业务</code>配合实现，做了半年多后终于上线，但是下边员工普遍反映卡顿，甚至卡死，爆栈。尤其是新增和修改合同页面，因为这部分数据量大，逻辑复杂，很容易崩溃，所以决定进行性能优化。</p>\n<h2 id=\"二、业务场景介绍\"><a href=\"#二、业务场景介绍\" class=\"headerlink\" title=\"二、业务场景介绍\"></a>二、业务场景介绍</h2><p>&emsp;&emsp;先来了解一下我们是怎么实现：</p>\n<p>&emsp;&emsp;1. 因为我们公司合同变换频繁，条款之间还有逻辑，所以做了个<code>基础服务</code>（说白了就是组件库），为合同提供模板</p>\n<p>&emsp;&emsp;2. 表单设计器作为基础服务，打包成了组件库，嵌入到合同项目，包括合同生成组件（拖拽生成合同模板）和合同预览组件（加载数据库中的合同模板数据）</p>\n<p>&emsp;&emsp;3. 合同项目有一个模块管理页面，可以对多个模板进行维护，比如可以选择启用哪个模板。</p>\n<p>&emsp;&emsp;4. 合同的管理员负责维护模板，可以用表单设计器拖拽生成合同模板，提交后落入数据库，每个合同类型可以同时启用一个模板。</p>\n<p>&emsp;&emsp;5. 最终下边员工用的就是启用的模板（尤其是这部门卡顿） </p>\n<p><strong>下面是电子合同的宏观泳道图：</strong><br><img src=\"https://img-blog.csdnimg.cn/20200216200900531.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<h2 id=\"三、页面介绍\"><a href=\"#三、页面介绍\" class=\"headerlink\" title=\"三、页面介绍\"></a>三、页面介绍</h2><ol>\n<li>合同模板管理页<br><img src=\"https://img-blog.csdnimg.cn/20200910105834157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></li>\n<li>新增模板页面<br><img src=\"https://img-blog.csdnimg.cn/20200910105956622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></li>\n<li>新建合同页面<br><img src=\"https://img-blog.csdnimg.cn/202009101101566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></li>\n<li>合同填写页面<br><img src=\"https://img-blog.csdnimg.cn/20200911134425140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></li>\n</ol>\n<p>&emsp;&emsp;好了，基本的业务逻辑和页面就介绍这么多，特别卡顿的页面就是第四个页面，下面我们分析一下卡顿的原因。</p>\n<h2 id=\"四、卡顿分析\"><a href=\"#四、卡顿分析\" class=\"headerlink\" title=\"四、卡顿分析\"></a>四、卡顿分析</h2><p>&emsp;&emsp;1. 首先就是表单设计器的问题最严重，因为每一个组件需要很多配置项才能够支撑组件的渲染，而一个合同是由上千个组件组成，经过测试，一个合同模板需要5MB的存储空间(数据库用的是MongoDB，存储格式为字符串，几乎不影响)，下面是一个输入框的配置</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200910103459458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>&emsp;&emsp;2. 表单设计器的实现用了大量的闭包管理业务，我们都知道，闭包是特别耗内存的。</p>\n<p>&emsp;&emsp;3. 合同模板巨复杂，由上万个组件拼接而成，我把模板数据down下来看了一下，大约是16000多个组件，大小为3.4MB。</p>\n<p>&emsp;&emsp;4. 因为表单设计器中包括<code>id,model,事件id</code>都是前端随机生成的，采用<code>随机字符串+时间戳</code>的形式，一共46位。</p>\n<p>&emsp;&emsp;5. 合同项目属于大型项目，业务场景及其复杂，包括合同管理，附件管理，合同列表，新增页面，审批页面等等，我计算了一下，光路由页面就有三十多个，<code>页面，组件，样式,业务</code>巨多，如果不做处理，不卡才怪</p>\n<h2 id=\"五、性能优化\"><a href=\"#五、性能优化\" class=\"headerlink\" title=\"五、性能优化\"></a>五、性能优化</h2><h4 id=\"1-第一次尝试\"><a href=\"#1-第一次尝试\" class=\"headerlink\" title=\"1. 第一次尝试\"></a>1. 第一次尝试</h4><p>&emsp;&emsp;说一下我的优化思路：首先，电子合同由表单设计器和合同业务两个项目共同完成，合同模板加载慢的原因是浏览器渲染了大量的模板数据，这些模板数据是由多个组组成的（大约12个），我第一想到的就是<code>分组渲染</code>，先加载一个组，先让用户看到页面，然后在继续加载，一个一个,最终加载完成。这也是被大家认可的方案。</p>\n<p>&emsp;&emsp;然后我就开始实现这个分组渲染，做了大概有二十多天吧，一点效果没出来。</p>\n<p>&emsp;&emsp;先看一下渲染的代码：</p>\n<pre><code>&lt;template v-show=&quot;itemManage===&#39;group&#39;&quot;&gt;\n  &lt;preview-item-template v-for=&quot;(item) in domainNodeList&quot;\n                        :key=&quot;item.id&quot;\n                        :formNode=&quot;item&quot;\n                        :parent=&quot;domainNodeList&quot;&gt;\n  &lt;/preview-item-template&gt;\n&lt;/template&gt;</code></pre><p>&emsp;&emsp;上面就是所有组加载的代码，这是一个<code>v-for</code>,做分组渲染，我想到使用<code>vue的异步组件</code>实现，但是这是一个循环，所有的组件注册的都是同一个名字，这显然是不能用异步组件的，除非注册的是不同名字的组件，但是我想了很长时间都做出来效果，所以这二十多天，失败了。</p>\n<h4 id=\"2-第二次尝试\"><a href=\"#2-第二次尝试\" class=\"headerlink\" title=\"2.第二次尝试\"></a>2.第二次尝试</h4><p>&emsp;&emsp;上边说了，模板加载慢是因为浏览器渲染了大量的数据，我们知道，js是单线程的，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。因此js处理数据的能力有限，所以在朋友的建议下调研了一把<code>webworker</code>。</p>\n<p>&emsp;&emsp;webworker的作用，就是为js创造多线程环境，允许主线程创建Worker线程，将一些任务分配给后者运行。在主线程运行的同时，Worker线程在后台运行，两者互不干扰。</p>\n<p>&emsp;&emsp;看了一把文档我第一时间觉得这个方案不可行。说到底我们就是想要webworker为我们开辟县城用来处理大量数据，但是webworker处理的大数据，不是指数据量非常大，而是要从计算量来看，通常用时不能控制在毫秒级内的运算都可以考虑放在web worker中执行。而我们的合同模板数据恰恰是数据量大，并不需要做特别大的运算。</p>\n<p>&emsp;&emsp;第二次尝试失败。</p>\n<h4 id=\"3-第三次尝试\"><a href=\"#3-第三次尝试\" class=\"headerlink\" title=\"3.第三次尝试\"></a>3.第三次尝试</h4><p>&emsp;&emsp;后来在同事的建议下决定采用<code>ssr</code>,也就是<code>服务端预渲染</code>。我们平常写的vue项目打包后生成<code>dist</code>,运维会把这个文件夹放在服务器中，我们看到的页面其实就是生成执行的<code>render函数</code>，这是比较耗时的。</p>\n<p>&emsp;&emsp;所谓的服务端渲染，就是在<code>服务端</code>生成静态页面，然后交给<code>客户端</code>渲染。</p>\n<p>&emsp;&emsp;自己从零搭建一套服务端渲染的应用是相当复杂的，所以我最终选用了<code>nuxt</code>框架。关于nuxt框架我不多做介绍，可以自己去看文档<a href=\"https://nuxtjs.org/\" target=\"_blank\" rel=\"noopener\">（传送门）</a>。这个框架有自己的脚手架，也是vue官方推荐的。</p>\n<p>&emsp;&emsp;经过了一周的时间，完成了从vue向nuxt的迁移，大部门页面速度有了明显的提升。</p>\n<p>&emsp;&emsp;<strong>除了我们想优化的新增合同页面。</strong></p>\n<p>&emsp;&emsp;经过分析，合同项目用到的组件库有<code>element-UI</code>和我问自己的表单设计器，element只有部门组件支持ssr，像是<code>表格和树</code>是不支持ssr的，所以就不存在服务端渲染了。</p>\n<p>&emsp;&emsp;我也曾尝试过弄一把表单设计器，让它支持ssr，但是并没有效果，如果有谁知道，可以联系我。</p>\n<p>&emsp;&emsp;很显然，第三次也失败了。</p>\n<h4 id=\"4-第四次尝试\"><a href=\"#4-第四次尝试\" class=\"headerlink\" title=\"4.第四次尝试\"></a>4.第四次尝试</h4><p>&emsp;&emsp;命运总是很捉弄人，优化了一个多月的合同，速度并没有显著的提升，领导很着急，我也很着急。</p>\n<p>&emsp;&emsp;突然有一天，我在回家的途中，记得那天风雨交加，雷霆大作，一声巨雷轰天响，把我好的idea都劈出来了。我一下子想到了分组加载的实现。</p>\n<p>先来看一把代码的实现（只展示了部分代码）：</p>\n<pre><code>&lt;template&gt;\n  &lt;div class=&quot;dialog-preview&quot; v-show=&quot;!formLoading&quot;&gt;\n      &lt;el-form  ref=&quot;previewForm&quot; onsubmit=&quot;return false&quot;\n                :size=&quot;formSettingState.componentSize&quot;\n                @hook:mounted=&quot;formMounted&quot;\n                :model=&quot;formModels&quot;&gt;\n\n        &lt;template v-show=&quot;itemManage===&#39;group&#39;&quot;&gt;\n          &lt;preview-item-template v-for=&quot;(item) in cutDomainNodeList.one&quot;\n                                :key=&quot;item.id&quot;\n                                :formNode=&quot;item&quot;\n                                :parent=&quot;cutDomainNodeList.one&quot;&gt;\n          &lt;/preview-item-template&gt;\n        &lt;/template&gt;\n        &lt;template v-if=&quot;itemManage===&#39;group&#39; &amp;&amp; formLoadingTwo&quot;&gt;\n          &lt;preview-item-template v-for=&quot;(item) in cutDomainNodeList.two&quot;\n                                :key=&quot;item.id&quot;\n                                :formNode=&quot;item&quot;\n                                :parent=&quot;cutDomainNodeList.two&quot;&gt;\n          &lt;/preview-item-template&gt;\n        &lt;/template&gt;\n         &lt;template v-if=&quot;itemManage===&#39;group&#39; &amp;&amp; formLoadingThree&quot;&gt;\n          &lt;preview-item-template v-for=&quot;(item) in cutDomainNodeList.three&quot;\n                                :key=&quot;item.id&quot;\n                                :formNode=&quot;item&quot;\n                                :parent=&quot;cutDomainNodeList.three&quot;&gt;\n          &lt;/preview-item-template&gt;\n        &lt;/template&gt;\n        &lt;/template&gt;\n      &lt;/el-form&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\nexport default {\n    data() {\n        return {\n          formLoading: true,\n          formLoadingTwo: false,\n          formLoadingThree: false\n        }\n    },\n    computed: {\n        cutDomainNodeList () {\n          let { domainNodeList } = this;\n          let length = domainNodeList.length;\n          if ( length &lt;= 4 ) {\n            return {\n              one: domainNodeList\n            }\n          }else {\n            return {\n              one: domainNodeList.filter((el, index) =&gt; index &lt;=2 ),\n              two: domainNodeList.filter((el, index) =&gt; index&gt;2 &amp;&amp; index &lt;=5 ),\n              three: domainNodeList.filter((el, index ) =&gt; index &gt; 5)\n            }\n        }\n    },\n    methods: {\n        formMounted () {\n          setTimeout(() =&gt; { this.formLoading = false },  500);\n          setTimeout(() =&gt; { this.formLoadingTwo = true },  700);\n          setTimeout(() =&gt; { this.formLoadingThree = true},  900);\n        }\n    }\n}</code></pre><p><strong>分块加载实现思路：</strong></p>\n<p>&emsp;&emsp; 1. 首先我把模板数据这个list利用计算属性先做了个判断，如果数组长度小于4，证明数据量较小，不需要分块加载，如果大于4证明数据量大，需要进行分块加载</p>\n<p>&emsp;&emsp; 2. 分块加载是根据数组索引过滤的，第一块是0-2组，第二块是2-5组，第三块是索引大于5的（也可以分割的跟细），然后再页面中分别遍历渲染</p>\n<p>&emsp;&emsp; 3. 看一下<code>html</code>中的<code>el-form</code>这个标签，里边有个<code>@hook:mounted=&quot;formMounted&quot;</code>这句话，<code>@hook:</code>+<code>生命周期</code>代表在这个生命周期时执行，我们等<code>mounted</code>执行完延时500mm开始加载第一块，700mm加载第二块，900毫秒加载第三块，这样分块加载的效果就出来了。</p>\n<h2 id=\"六、其他方面优化\"><a href=\"#六、其他方面优化\" class=\"headerlink\" title=\"六、其他方面优化\"></a>六、其他方面优化</h2><p>&emsp;&emsp;  首先添加了骨架屏组件，让用户在等待的时候能看到过渡效果。</p>\n<p>&emsp;&emsp; 上面提到，合同模板大约在<code>3.4MB</code>，这个就是个纯<code>json</code>,让浏览器一下子加载这个么大的数据难免卡顿，所以我就在想能不能优化一下模板大小，从而能够提升加载速度。</p>\n<p>&emsp;&emsp; 表单设计器中包括<code>id,model,事件id</code>都是前端随机生成的，采用<code>随机字符串+时间戳</code>的形式，一共46位，一个英文字符就是一个字节，这就是46个字节，所以我们可以缩短一下随机数的长度，从而减少一下模板大小。</p>\n<p>&emsp;&emsp; 最终选用了26位随机数，我算了一下，大约能减少一半大小。</p>\n<p>&emsp;&emsp; 后来我们让测试人员新生成了一个模板，果然，新模板大小<code>1.44MB</code>，缩短了一倍还多。</p>\n<p>&emsp;&emsp; 其他方面，我们知道表单设计器有些配置做的不到位，所以管理员不得不换个别的方式拖拽模板，所以我们加了一些配置项，从而使管理员可以少拖拽一些组件。这部分优化下来，模板大小大约减少了<code>300多kb</code>.</p>\n<p>&emsp;&emsp; 我们还可以优化一下表单设计器的代码，把闭包换个实现方式，应该也能提高加载速度，后续会做这些。</p>\n<p>&emsp;&emsp; 合同业务项目也优化了一些接口，代码，前后端交互方式，以及页面的交互方式提高了性能和视觉效果。</p>\n<h2 id=\"七、总结\"><a href=\"#七、总结\" class=\"headerlink\" title=\"七、总结\"></a>七、总结</h2><p>&emsp;&emsp; 这是我第一次费这么大劲做vue项目的性能优化，虽然坎坷，但也留下了好结果，我们从最初加载需要50秒甚至一分钟，到现在10秒左右就能加载成功，速度提高可近5倍。</p>\n<p>&emsp;&emsp; 整体效果如下：<br><img src=\"https://qjprod-images.oss-cn-beijing.aliyuncs.com/menuResource/1600564965755?name=111.gif\" alt=\"image\"></p>\n<p>&emsp;&emsp; 今日成果，虽数月，但众人拾柴，得以燎原，此非一人之功，谢而不及。</p>\n","site":{"data":{"galleries":[{"name":"2017","cover":"https://img-blog.csdnimg.cn/20191201090129350.jpg","description":"2017年记录","photos":["https://img-blog.csdnimg.cn/20191201090129350.jpg","https://img-blog.csdnimg.cn/20200216200900531.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70"]}]}},"excerpt":"一、背景\n目前公司的电子合同采用表单设计器+合同业务配合实现，做了半年多后终于上线，但是下边员工普遍反映卡顿，甚至卡死，爆栈。尤其是新增和修改合同页面，因为这部分数据量大，逻辑复杂，很容易崩溃，所以决定进行性能优化。\n\n二、业务场景介绍\n先来了解一下我们是怎么实现：\n\n1. 因为我们公司合同变换频繁，条款之间还有逻辑，所以做了个基础服务（说白了就是组件库），为合同提供模板\n\n2. 表单设计器作为基础服务，打包成了组件库，嵌入到合同项目，包括合同生成组件（拖拽生成合同模板）和合同预览组件（加载数据库中的合同模板数据）\n\n3. 合同项目有一个模块管理页面，可以对多个模板进行维护，比如可以选择启用哪","more":"<h2 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h2><p>&emsp;&emsp;目前公司的<code>电子合同</code>采用<code>表单设计器</code>+<code>合同业务</code>配合实现，做了半年多后终于上线，但是下边员工普遍反映卡顿，甚至卡死，爆栈。尤其是新增和修改合同页面，因为这部分数据量大，逻辑复杂，很容易崩溃，所以决定进行性能优化。</p>\n<h2 id=\"二、业务场景介绍\"><a href=\"#二、业务场景介绍\" class=\"headerlink\" title=\"二、业务场景介绍\"></a>二、业务场景介绍</h2><p>&emsp;&emsp;先来了解一下我们是怎么实现：</p>\n<p>&emsp;&emsp;1. 因为我们公司合同变换频繁，条款之间还有逻辑，所以做了个<code>基础服务</code>（说白了就是组件库），为合同提供模板</p>\n<p>&emsp;&emsp;2. 表单设计器作为基础服务，打包成了组件库，嵌入到合同项目，包括合同生成组件（拖拽生成合同模板）和合同预览组件（加载数据库中的合同模板数据）</p>\n<p>&emsp;&emsp;3. 合同项目有一个模块管理页面，可以对多个模板进行维护，比如可以选择启用哪个模板。</p>\n<p>&emsp;&emsp;4. 合同的管理员负责维护模板，可以用表单设计器拖拽生成合同模板，提交后落入数据库，每个合同类型可以同时启用一个模板。</p>\n<p>&emsp;&emsp;5. 最终下边员工用的就是启用的模板（尤其是这部门卡顿） </p>\n<p><strong>下面是电子合同的宏观泳道图：</strong><br><img src=\"https://img-blog.csdnimg.cn/20200216200900531.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<h2 id=\"三、页面介绍\"><a href=\"#三、页面介绍\" class=\"headerlink\" title=\"三、页面介绍\"></a>三、页面介绍</h2><ol>\n<li>合同模板管理页<br><img src=\"https://img-blog.csdnimg.cn/20200910105834157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></li>\n<li>新增模板页面<br><img src=\"https://img-blog.csdnimg.cn/20200910105956622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></li>\n<li>新建合同页面<br><img src=\"https://img-blog.csdnimg.cn/202009101101566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></li>\n<li>合同填写页面<br><img src=\"https://img-blog.csdnimg.cn/20200911134425140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></li>\n</ol>\n<p>&emsp;&emsp;好了，基本的业务逻辑和页面就介绍这么多，特别卡顿的页面就是第四个页面，下面我们分析一下卡顿的原因。</p>\n<h2 id=\"四、卡顿分析\"><a href=\"#四、卡顿分析\" class=\"headerlink\" title=\"四、卡顿分析\"></a>四、卡顿分析</h2><p>&emsp;&emsp;1. 首先就是表单设计器的问题最严重，因为每一个组件需要很多配置项才能够支撑组件的渲染，而一个合同是由上千个组件组成，经过测试，一个合同模板需要5MB的存储空间(数据库用的是MongoDB，存储格式为字符串，几乎不影响)，下面是一个输入框的配置</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200910103459458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>&emsp;&emsp;2. 表单设计器的实现用了大量的闭包管理业务，我们都知道，闭包是特别耗内存的。</p>\n<p>&emsp;&emsp;3. 合同模板巨复杂，由上万个组件拼接而成，我把模板数据down下来看了一下，大约是16000多个组件，大小为3.4MB。</p>\n<p>&emsp;&emsp;4. 因为表单设计器中包括<code>id,model,事件id</code>都是前端随机生成的，采用<code>随机字符串+时间戳</code>的形式，一共46位。</p>\n<p>&emsp;&emsp;5. 合同项目属于大型项目，业务场景及其复杂，包括合同管理，附件管理，合同列表，新增页面，审批页面等等，我计算了一下，光路由页面就有三十多个，<code>页面，组件，样式,业务</code>巨多，如果不做处理，不卡才怪</p>\n<h2 id=\"五、性能优化\"><a href=\"#五、性能优化\" class=\"headerlink\" title=\"五、性能优化\"></a>五、性能优化</h2><h4 id=\"1-第一次尝试\"><a href=\"#1-第一次尝试\" class=\"headerlink\" title=\"1. 第一次尝试\"></a>1. 第一次尝试</h4><p>&emsp;&emsp;说一下我的优化思路：首先，电子合同由表单设计器和合同业务两个项目共同完成，合同模板加载慢的原因是浏览器渲染了大量的模板数据，这些模板数据是由多个组组成的（大约12个），我第一想到的就是<code>分组渲染</code>，先加载一个组，先让用户看到页面，然后在继续加载，一个一个,最终加载完成。这也是被大家认可的方案。</p>\n<p>&emsp;&emsp;然后我就开始实现这个分组渲染，做了大概有二十多天吧，一点效果没出来。</p>\n<p>&emsp;&emsp;先看一下渲染的代码：</p>\n<pre><code>&lt;template v-show=&quot;itemManage===&#39;group&#39;&quot;&gt;\n  &lt;preview-item-template v-for=&quot;(item) in domainNodeList&quot;\n                        :key=&quot;item.id&quot;\n                        :formNode=&quot;item&quot;\n                        :parent=&quot;domainNodeList&quot;&gt;\n  &lt;/preview-item-template&gt;\n&lt;/template&gt;</code></pre><p>&emsp;&emsp;上面就是所有组加载的代码，这是一个<code>v-for</code>,做分组渲染，我想到使用<code>vue的异步组件</code>实现，但是这是一个循环，所有的组件注册的都是同一个名字，这显然是不能用异步组件的，除非注册的是不同名字的组件，但是我想了很长时间都做出来效果，所以这二十多天，失败了。</p>\n<h4 id=\"2-第二次尝试\"><a href=\"#2-第二次尝试\" class=\"headerlink\" title=\"2.第二次尝试\"></a>2.第二次尝试</h4><p>&emsp;&emsp;上边说了，模板加载慢是因为浏览器渲染了大量的数据，我们知道，js是单线程的，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。因此js处理数据的能力有限，所以在朋友的建议下调研了一把<code>webworker</code>。</p>\n<p>&emsp;&emsp;webworker的作用，就是为js创造多线程环境，允许主线程创建Worker线程，将一些任务分配给后者运行。在主线程运行的同时，Worker线程在后台运行，两者互不干扰。</p>\n<p>&emsp;&emsp;看了一把文档我第一时间觉得这个方案不可行。说到底我们就是想要webworker为我们开辟县城用来处理大量数据，但是webworker处理的大数据，不是指数据量非常大，而是要从计算量来看，通常用时不能控制在毫秒级内的运算都可以考虑放在web worker中执行。而我们的合同模板数据恰恰是数据量大，并不需要做特别大的运算。</p>\n<p>&emsp;&emsp;第二次尝试失败。</p>\n<h4 id=\"3-第三次尝试\"><a href=\"#3-第三次尝试\" class=\"headerlink\" title=\"3.第三次尝试\"></a>3.第三次尝试</h4><p>&emsp;&emsp;后来在同事的建议下决定采用<code>ssr</code>,也就是<code>服务端预渲染</code>。我们平常写的vue项目打包后生成<code>dist</code>,运维会把这个文件夹放在服务器中，我们看到的页面其实就是生成执行的<code>render函数</code>，这是比较耗时的。</p>\n<p>&emsp;&emsp;所谓的服务端渲染，就是在<code>服务端</code>生成静态页面，然后交给<code>客户端</code>渲染。</p>\n<p>&emsp;&emsp;自己从零搭建一套服务端渲染的应用是相当复杂的，所以我最终选用了<code>nuxt</code>框架。关于nuxt框架我不多做介绍，可以自己去看文档<a href=\"https://nuxtjs.org/\" target=\"_blank\" rel=\"noopener\">（传送门）</a>。这个框架有自己的脚手架，也是vue官方推荐的。</p>\n<p>&emsp;&emsp;经过了一周的时间，完成了从vue向nuxt的迁移，大部门页面速度有了明显的提升。</p>\n<p>&emsp;&emsp;<strong>除了我们想优化的新增合同页面。</strong></p>\n<p>&emsp;&emsp;经过分析，合同项目用到的组件库有<code>element-UI</code>和我问自己的表单设计器，element只有部门组件支持ssr，像是<code>表格和树</code>是不支持ssr的，所以就不存在服务端渲染了。</p>\n<p>&emsp;&emsp;我也曾尝试过弄一把表单设计器，让它支持ssr，但是并没有效果，如果有谁知道，可以联系我。</p>\n<p>&emsp;&emsp;很显然，第三次也失败了。</p>\n<h4 id=\"4-第四次尝试\"><a href=\"#4-第四次尝试\" class=\"headerlink\" title=\"4.第四次尝试\"></a>4.第四次尝试</h4><p>&emsp;&emsp;命运总是很捉弄人，优化了一个多月的合同，速度并没有显著的提升，领导很着急，我也很着急。</p>\n<p>&emsp;&emsp;突然有一天，我在回家的途中，记得那天风雨交加，雷霆大作，一声巨雷轰天响，把我好的idea都劈出来了。我一下子想到了分组加载的实现。</p>\n<p>先来看一把代码的实现（只展示了部分代码）：</p>\n<pre><code>&lt;template&gt;\n  &lt;div class=&quot;dialog-preview&quot; v-show=&quot;!formLoading&quot;&gt;\n      &lt;el-form  ref=&quot;previewForm&quot; onsubmit=&quot;return false&quot;\n                :size=&quot;formSettingState.componentSize&quot;\n                @hook:mounted=&quot;formMounted&quot;\n                :model=&quot;formModels&quot;&gt;\n\n        &lt;template v-show=&quot;itemManage===&#39;group&#39;&quot;&gt;\n          &lt;preview-item-template v-for=&quot;(item) in cutDomainNodeList.one&quot;\n                                :key=&quot;item.id&quot;\n                                :formNode=&quot;item&quot;\n                                :parent=&quot;cutDomainNodeList.one&quot;&gt;\n          &lt;/preview-item-template&gt;\n        &lt;/template&gt;\n        &lt;template v-if=&quot;itemManage===&#39;group&#39; &amp;&amp; formLoadingTwo&quot;&gt;\n          &lt;preview-item-template v-for=&quot;(item) in cutDomainNodeList.two&quot;\n                                :key=&quot;item.id&quot;\n                                :formNode=&quot;item&quot;\n                                :parent=&quot;cutDomainNodeList.two&quot;&gt;\n          &lt;/preview-item-template&gt;\n        &lt;/template&gt;\n         &lt;template v-if=&quot;itemManage===&#39;group&#39; &amp;&amp; formLoadingThree&quot;&gt;\n          &lt;preview-item-template v-for=&quot;(item) in cutDomainNodeList.three&quot;\n                                :key=&quot;item.id&quot;\n                                :formNode=&quot;item&quot;\n                                :parent=&quot;cutDomainNodeList.three&quot;&gt;\n          &lt;/preview-item-template&gt;\n        &lt;/template&gt;\n        &lt;/template&gt;\n      &lt;/el-form&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\nexport default {\n    data() {\n        return {\n          formLoading: true,\n          formLoadingTwo: false,\n          formLoadingThree: false\n        }\n    },\n    computed: {\n        cutDomainNodeList () {\n          let { domainNodeList } = this;\n          let length = domainNodeList.length;\n          if ( length &lt;= 4 ) {\n            return {\n              one: domainNodeList\n            }\n          }else {\n            return {\n              one: domainNodeList.filter((el, index) =&gt; index &lt;=2 ),\n              two: domainNodeList.filter((el, index) =&gt; index&gt;2 &amp;&amp; index &lt;=5 ),\n              three: domainNodeList.filter((el, index ) =&gt; index &gt; 5)\n            }\n        }\n    },\n    methods: {\n        formMounted () {\n          setTimeout(() =&gt; { this.formLoading = false },  500);\n          setTimeout(() =&gt; { this.formLoadingTwo = true },  700);\n          setTimeout(() =&gt; { this.formLoadingThree = true},  900);\n        }\n    }\n}</code></pre><p><strong>分块加载实现思路：</strong></p>\n<p>&emsp;&emsp; 1. 首先我把模板数据这个list利用计算属性先做了个判断，如果数组长度小于4，证明数据量较小，不需要分块加载，如果大于4证明数据量大，需要进行分块加载</p>\n<p>&emsp;&emsp; 2. 分块加载是根据数组索引过滤的，第一块是0-2组，第二块是2-5组，第三块是索引大于5的（也可以分割的跟细），然后再页面中分别遍历渲染</p>\n<p>&emsp;&emsp; 3. 看一下<code>html</code>中的<code>el-form</code>这个标签，里边有个<code>@hook:mounted=&quot;formMounted&quot;</code>这句话，<code>@hook:</code>+<code>生命周期</code>代表在这个生命周期时执行，我们等<code>mounted</code>执行完延时500mm开始加载第一块，700mm加载第二块，900毫秒加载第三块，这样分块加载的效果就出来了。</p>\n<h2 id=\"六、其他方面优化\"><a href=\"#六、其他方面优化\" class=\"headerlink\" title=\"六、其他方面优化\"></a>六、其他方面优化</h2><p>&emsp;&emsp;  首先添加了骨架屏组件，让用户在等待的时候能看到过渡效果。</p>\n<p>&emsp;&emsp; 上面提到，合同模板大约在<code>3.4MB</code>，这个就是个纯<code>json</code>,让浏览器一下子加载这个么大的数据难免卡顿，所以我就在想能不能优化一下模板大小，从而能够提升加载速度。</p>\n<p>&emsp;&emsp; 表单设计器中包括<code>id,model,事件id</code>都是前端随机生成的，采用<code>随机字符串+时间戳</code>的形式，一共46位，一个英文字符就是一个字节，这就是46个字节，所以我们可以缩短一下随机数的长度，从而减少一下模板大小。</p>\n<p>&emsp;&emsp; 最终选用了26位随机数，我算了一下，大约能减少一半大小。</p>\n<p>&emsp;&emsp; 后来我们让测试人员新生成了一个模板，果然，新模板大小<code>1.44MB</code>，缩短了一倍还多。</p>\n<p>&emsp;&emsp; 其他方面，我们知道表单设计器有些配置做的不到位，所以管理员不得不换个别的方式拖拽模板，所以我们加了一些配置项，从而使管理员可以少拖拽一些组件。这部分优化下来，模板大小大约减少了<code>300多kb</code>.</p>\n<p>&emsp;&emsp; 我们还可以优化一下表单设计器的代码，把闭包换个实现方式，应该也能提高加载速度，后续会做这些。</p>\n<p>&emsp;&emsp; 合同业务项目也优化了一些接口，代码，前后端交互方式，以及页面的交互方式提高了性能和视觉效果。</p>\n<h2 id=\"七、总结\"><a href=\"#七、总结\" class=\"headerlink\" title=\"七、总结\"></a>七、总结</h2><p>&emsp;&emsp; 这是我第一次费这么大劲做vue项目的性能优化，虽然坎坷，但也留下了好结果，我们从最初加载需要50秒甚至一分钟，到现在10秒左右就能加载成功，速度提高可近5倍。</p>\n<p>&emsp;&emsp; 整体效果如下：<br><img src=\"https://qjprod-images.oss-cn-beijing.aliyuncs.com/menuResource/1600564965755?name=111.gif\" alt=\"image\"></p>\n<p>&emsp;&emsp; 今日成果，虽数月，但众人拾柴，得以燎原，此非一人之功，谢而不及。</p>\n"},{"title":"程序员标配--使用hexo+github搭建个人博客","date":"2020-01-09T10:37:03.000Z","preview":200,"toc":true,"_content":"&emsp;&emsp;作为一名合格的程序员，拥有一个自己的个人网站，那想必是非常舒服了。我们可以在里边写写技术博客，发发牢骚，记录自己的生活。当然，我们可以在博客园，掘金的博客网站发表，但是那毕竟是人家的东西，我们应该试着搭建一个自己的博客。但是，做网站就要买服务器，买服务器就要花钱，这对于我们这帮屌丝程序员来说当然是不太友好，这时候，我们就想到一个搭建很熟悉的东西--github。\n&emsp;&emsp;github作为世界上最大的同性交友基地，它除了能为广大男性同胞带来灵魂上的快感，还有一个巨大的作用，那就是可以充当一个小型的服务器。\n\n&emsp;&emsp;**使用gitlab搭建个人博客的好处非常多，比如：**\n1. 访问速度快，仓库里只需放打包好的静态页面\n2. 构建快，代码push到远程仓库后，分分钟构建完\n3. 免费（当然这是最大的好处）\n4. 易于管理，这得益于github超强的代码管理能力，比如分支，版本回退等\n5. 可以绑定自己的域名\n\n\n&emsp;&emsp;常见的博客生成工具有两种，一个是[hexo](https://hexo.io/zh-cn/),另一个是[jekyll](http://jekyllcn.com/)。两者其实大同小异，但是jekyll语法和配置相对于复杂，它需要ruby环境。而hexo就比较简单易上手，只需要node环境就ok了。下面我们进入正题，详细介绍如何使用hexo+github搭建个人博客。\n## 准备工作\n1. 首先你得有一个github账号吧，注册过程这里不做过多介绍了。[注册账号点这里](https://github.com/join?source=header-home)\n2. 配置node环境,根据系统下载好node安装包，一路下一步安装就ok了。[node下载](https://nodejs.org/zh-cn/download/)\n3. shell工具，这个可以自行选择，比如cmd，powerShell,git等，建议使用[git](https://git-scm.com/)\n4. 如果你想要自己的域名，可以花钱去申请一个，一般点的域名也不是太贵，一年几十块钱，其实这点钱对于程序员也不算什么，少买件格子衫就有了。\n\n&emsp;&emsp;好了，基本的准备工作就这些了,下面真的要进入正题了。\n\n# 安装hexo\nhexo需要全局安装，命令如下：\n\n```\nnpm install -g hexo\n```\n\nlinux和mac用户需要添加权限 \n\n```\nsudo npm install -g hexo\n```\n安装完成之后，接下来我们下载博客模板\n\n# 初始化模板\n 首先我们新建一个文件夹用来放模板，文件夹名字随便起，题材不限，这里以```blog```为例,新建blog文件夹，切换到blog，用hexo给出的命令```hexo init```初始化模板\n\n ```\n mkdir blog \n\n cd blog\n\n hexo init\n ```\n 下载完成时候，blog文件夹内出现以下文件\n \n ![image](https://img-blog.csdnimg.cn/2020042915153328.png)\n 下面介绍以下各个文件的作用\n - scaffolds: 模板文件夹，里边的```.md```文件都是各个模板，比如```page.md```是我们新建页面的模板， post是我们新建博客的模板，我们可以修改这些默认模板\n - source: 资源文件夹\n - themes: 主题文件夹\n - _config.yml: 网站的配置信息，大部分配置都可以在这里修改\n - package.json: 应用程序信息，也装着各种依赖\n\n# 打包成博客\n模板下载好之后，我们就用这个模板打包成博客并启动服务，首先先装一下依赖\n```\nnpm i\n```\n装完之后打包模板\n```\nhexo g\n```\n打包完成之后你会发现在目录下多了一个```public```文件夹,这些文件就是最终生成的博客静态网站，最终都要提交到github发布。\n\n接下来启动服务\n```\nhexo g\n```\n启动完之后控制台生成```http://localhost:4000```网址，打开之后就是这个丑样子：\n\n![image](https://img-blog.csdnimg.cn/20200429162134668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n由于这个主题实在是太丑了，所以接下来我们要美化一下\n\n# 更换主题\nhexo有一个主题库[地址](https://hexo.io/themes/),这里的主题应有，当然如果你都不喜欢，可以即几做一个，方法自己网上找。 我现在用的主题是```freemind.386```,病毒风格，特殊口味。\n以```freemind.386```为例，克隆项目到```theme```目录下\n```\ngit clone git@github.com:blackshow/hexo-theme-freemind.386.git themes/freemind.385\n```\n更改项目目录下```_config.yml```配置文件中的```theme```属性的值为```freemind.386```。注意不是主题文件中的```_config.yml```\n（再次注意，有的的主题是需要下载依赖的，具体看clone的主题目录有没有```package.json```,如果有，需要切换到主题目录执行```npm install```下载依赖包）;\n然后重新打包，启动服务，\n```\nhexo g\nhexo s\n```\n也可以使用组合命令\n```\nhexo s -g\n```\n\n到此为止，主题就更换完了\n\n本人对```freemind.386```这个主题进行了二次封装，修改了一些样式，添加评论插件，欢迎star [github地址](https://github.com/qisi007/hexo-theme-freemind.386.second)\n\n# 部署\n接下来，我们把生成的静态网页部署到github。\n#### (1)配置ssh\n首先，需要配置```ssh```,在命令行输入\n```\nssh-keygen -t rsa -C \"此处填写你的邮件地址\"\n```\n然后疯狂按3次回车就生成好了，我们把生成好的的````ssh```粘贴到github中，命令行输入\n```\ncat ~/.ssh/id_rsa.pub\n```\n复制```ssh```到github中，位置是 【点击github头像】-->【Settings】-->【SSH and GPG keys】--> 【New SSH key】\n\n然后配置git用户信息，防止以后每次提交代码都要输入账号和密码\n```\ngit config --global user.name \"github用户名\"\ngit config --global user.email \"githab注册用的邮箱\"\n```\n\n#### (2)创建博客仓库\n点击github右上角的加号，选择【New responitroy】新建一个仓库，仓库名为 ```你的github名+github.io```\n\n![image](https://img-blog.csdnimg.cn/2020042917304975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n进入仓库，选择【Settings】找到【GitHub Pages】这一项，其中【Source】选择```master branch```,\n下边的主题随便选一个让后commit提交\n\n![image](https://img-blog.csdnimg.cn/20200429174204811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n由于我绑定了域名，所以分配到了该域名的二级域名下，正常情况访问```你的用户名.github.io```应该能访问你的博客了\n\n#### (3)关联仓库地址部署\n上边所有配置完成之后，我们复制该远程仓库地址\n\n![image](https://img-blog.csdnimg.cn/20200429174927885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n\n将改地址复制到本地博客目录的```_config.yml```的```deploy```中\n![image](https://img-blog.csdnimg.cn/2020042917505687.png)\n\n注意远程仓库地址不加```https://```,接下来安装一个插件\n```\nnpm install hexo-deployer-git --save\n```\n安装成功后输入如下命令部署\n```\nhexo d\n```\n出现如下信息部署就成功了，等几分钟访问```你的用户名.github.io```就ojbk了\n\n![image](https://img-blog.csdnimg.cn/20200429175657132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n\n\n# 关联域名\n毕竟上边那种github的地址不容易被人记住，如果有一个自己的地址就再好不过了。其实买个普通的也就几十块钱，少```洗一次脚```能买好几个。我是在腾讯云买的，一年21块大洋。[购买传送门](https://dnspod.cloud.tencent.com/)\n\n完成支付之后，进入控制台，绑定域名之前需要```邮箱验证```和```实名认证```，用不多长时间，几分钟搞定。然后点击进行解析域名，操作路径为【我的域名】-->【解析】\n\n![image](https://img-blog.csdnimg.cn/20200429182104444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n解析需要github仓库服务的ip,获取方法为在命令行输入\n```\nping 服务地址   // 例如 liuguisheng.github.io\n```\n获取后在腾讯云控制台配置如下\n\n![image](https://img-blog.csdnimg.cn/20200429182546851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n具体配置参入里边都有介绍，这里我就不多说了，接下来进行github设置\n\n在项目的【source】文件夹下新建```CNAME```文件（没有后缀）,里边填写你的域名。重新打包发布等几分钟就能访问你的域名了。 ×注意网上有的方法是直接在远程仓库的根目录下直接新建```CNAME```文件，不要那么干，因为你每次部署的时候都会把这个文件冲调，放在【source】文件的原因是hexo编译的时候会把里边的文件原封不动复制到【public】文件夹下。\n\n到现在为止基本的部署的工作都做完了，接下来94要看看我们如何写博客了\n\n# 发布博客\n\n发布博客很简单，命令行输入\n```\nhexo new '博客名称'\n```\n完成后hexo会在【source】中的【_posts】文件生成一个```mardown```文件，在里边编辑博客就可以了\n\nmardown文件头部部分可以添加的属性说明\n\n    - title----------博客名称\n    - date-----------发布日期\n    - categories-----分类\n    - tags-----------标签\n    - preview--------列表页最多展示多少个文字\n    - toc------------是否添加目录结构\n\n如果你想修改默模板可以去【scaffolds】文件夹下修改```post.md```文件\n\n# hexo 命令汇总\n#### (1)基本命令\n\n描述 | 命令 | 缩写\n--- | --- | --- \n生成静态页面 | hexo generate | hexo g\n开启服务 | hexo server | hexo s\n部署到github | hexo deploy | hexo d\n新建文章 | hexo new \"articleName\" | -\n新建页面 | hexo new page \"htmlName\" | -\n查看帮助 | hexo help | - \n查看hexo版本号 | hexo version\n\n#### (2)组合命令\n描述 | 命令 |\n--- | --- |  \n生成页面并预览 | hexo s -g | \n生成页面并上传到github | hexo d -g | \n\n\n# 添加标签页和分类页面\n\n#### (1)标签页\n命令行输入\n```\nhexo new page \"tags\"\n```\n这是hexo会在【soruce】文件夹下生成一个【tags】文件夹，修改该文件夹下的```index.md```,替换里边的内容为\n```\n---\ntitle: tags\ndate: 2020-04-28 17:15:54\ntype: \"tags\" \nlayout: \"tags\" \n---\n\n```\n然后修改【theme】文件夹下的```_config.yml```的menu,添加如下配置\n\n![image](https://img-blog.csdnimg.cn/2020042918543177.png)\n\n重新打包部署即可\n\n\n#### (2)分类页面\n分类页面和标签页类似，命令行输入\n```\nhexo new page \"categories\"\n```\n这是hexo会在【soruce】文件夹下生成一个【tags】文件夹，修改该文件夹下的```index.md```,替换里边的内容为\n```\n---\ntitle: categories\ndate: 2020-04-28 16:46:27\ntype: \"categories\"\nlayout: \"categories\"\ncomments: false\n---\n\n\n```\n然后修改【theme】文件夹下的```_config.yml```的menu,添加如下配置\n\n![image](https://img-blog.csdnimg.cn/20200429185756736.png)\n\n重新打包部署即可\n\n# 添加评论插件\n网上的评论插件很多，但是最终我选择了```valine```, valine有一个自己的评论管理后台```leancloud```,每次读者在博客的评论都会流入leancloud后台。\n但是，```freemind.386```这个主题没有集成valine,后来从网上找了方法，改造了一下主题，如果其他主题没有集成valine,也可以用下边的方法。\n\n具体方法是在主题目录的【layout】-->【_partial】-->【post】文件夹下新建```valine.ejs```文件，里边填写如下代码\n```\n<div id=\"comment\"></div>\n<script src='//unpkg.com/valine/dist/Valine.min.js'></script>\n<script>\nnew Valine({\n    el: '#comment' ,\n    notify:true, \n    verify:true, \n    appId: '<%=theme.valine.appId%>',\n    appKey: '<%=theme.valine.appKey%>',\n    placeholder: '<%=theme.valine.appKey%>',\n    path:window.location.pathname, \n    avatar:'mm' \n});\n</script>\n```\n\n然后在主题目录的【layout】-->【_partial】的```article.ejs```文件中找到\n\n```\n\t<%- partial('post/comment', {page: item}) %>\n```\n这行代码下面填写\n\n```\n<% if (theme.valine && theme.valine.appId && theme.valine.appKey){ %>\n\t\t<section id=\"comments\" class=\"comments\">\n\t\t\t<style>\n\t\t\t.comments{padding:10px;background:#fff}\n\t\t\t@media screen and (max-width:800px){.comments{margin:auto;padding:10px;background:#000}}\n\t\t\t</style>\n\t\t\t<%- partial('post/valine', {\n\t\t\tkey: post.slug,\n\t\t\ttitle: post.title,\n\t\t\turl: config.url+url_for(post.path)\n\t\t\t}) %>\n\t\t</section>\n\t<% } %>\n```\n我把修改好的主题上传到我的github中，可以自行clone到【themes】文件夹下， [传送门](https://github.com/qisi007/hexo-theme-freemind.386.second)。\n\n\n上述工作完成后我们看看怎么添加valine评论插件。 \n\n首先去leancloud官网注册账号[传送门](https://leancloud.cn/)。注册完成之后进个人管理页面```添加应用```,输入应用名称，下边选开发板\n\n![image](https://img-blog.csdnimg.cn/20200430114031590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n点击设置按钮\n\n![image](https://img-blog.csdnimg.cn/20200430114551854.png)\n\n\n点击左边【存储】-->【创建class】,新建两个类用来存储评论，分别是```Comment```和```Counter```\n\n然后点击左边【设置】-->【安全中心】把没用的服务都关掉\n\n![image](https://img-blog.csdnimg.cn/20200430114909833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n然后点击【应用Keys】记录下```AppID```和```AppKey```,这两个是需要配置到项目中的\n\n最后在主题文件夹的```_config.yml```配置文件中添加如下代码，把```AppID```和```AppKey```添加到对应位置\n\n```\nvaline:\n  enable: true # 是否开启\n  appId:    # 上一步获取的 App ID\n  appKey:   # 上一步获取的 App Key\n  notify: true # 新留言是否需要通知 https://github.com/xCss/Valine/wiki\n  verify: true # 是否需要验证，验证比较反人类建议false关闭\n  placeholder: 请在此输入您的留言 # 默认留言框内的文字\n  avatar: mm # 默认头像\n  guest_info: nick,mail # 默认留言框的头部需要访问者输入的信息\n  pageSize: 10 # pagination size #默认单页的留言条数\n```\n\n最后执行```hexo d -g```打包部署，访问域名应该就可以了\n\n![image](https://img-blog.csdnimg.cn/20200430115425744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n\n\n好了，到现在可以拿着自己的网站出去装逼了，其实还有很多功能，只不过我现在没有研究，比如```相册```，```音乐播放器```等，等我以后有时间弄出来之后再分享给大家。\n\n我把我搭建的博客代码仓库地址也上传到了我的github中[传送门](https://github.com/qisi007/website-code-save)；\n\n[我的个人主页地址](https://www.liuguisheng.vip/)\n\n最后感谢下边博客的博主提供的帮助，小心心送上❤❤；\n\n感谢:\n\n[三分钟在GitHub上搭建个人博客](https://zhuanlan.zhihu.com/p/28321740)\n\n[使用hexo+github搭建免费个人博客详细教程](https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html)\n\n\n\n","source":"_posts/程序员标配-使用hexo-github搭建个人博客.md","raw":"---\ntitle: 程序员标配--使用hexo+github搭建个人博客\ndate: 2020-01-09 18:37:03\ncategories: 个人博客\ntags:\n - hexo\n - github\npreview: 200\ntoc: true\n---\n&emsp;&emsp;作为一名合格的程序员，拥有一个自己的个人网站，那想必是非常舒服了。我们可以在里边写写技术博客，发发牢骚，记录自己的生活。当然，我们可以在博客园，掘金的博客网站发表，但是那毕竟是人家的东西，我们应该试着搭建一个自己的博客。但是，做网站就要买服务器，买服务器就要花钱，这对于我们这帮屌丝程序员来说当然是不太友好，这时候，我们就想到一个搭建很熟悉的东西--github。\n&emsp;&emsp;github作为世界上最大的同性交友基地，它除了能为广大男性同胞带来灵魂上的快感，还有一个巨大的作用，那就是可以充当一个小型的服务器。\n\n&emsp;&emsp;**使用gitlab搭建个人博客的好处非常多，比如：**\n1. 访问速度快，仓库里只需放打包好的静态页面\n2. 构建快，代码push到远程仓库后，分分钟构建完\n3. 免费（当然这是最大的好处）\n4. 易于管理，这得益于github超强的代码管理能力，比如分支，版本回退等\n5. 可以绑定自己的域名\n\n\n&emsp;&emsp;常见的博客生成工具有两种，一个是[hexo](https://hexo.io/zh-cn/),另一个是[jekyll](http://jekyllcn.com/)。两者其实大同小异，但是jekyll语法和配置相对于复杂，它需要ruby环境。而hexo就比较简单易上手，只需要node环境就ok了。下面我们进入正题，详细介绍如何使用hexo+github搭建个人博客。\n## 准备工作\n1. 首先你得有一个github账号吧，注册过程这里不做过多介绍了。[注册账号点这里](https://github.com/join?source=header-home)\n2. 配置node环境,根据系统下载好node安装包，一路下一步安装就ok了。[node下载](https://nodejs.org/zh-cn/download/)\n3. shell工具，这个可以自行选择，比如cmd，powerShell,git等，建议使用[git](https://git-scm.com/)\n4. 如果你想要自己的域名，可以花钱去申请一个，一般点的域名也不是太贵，一年几十块钱，其实这点钱对于程序员也不算什么，少买件格子衫就有了。\n\n&emsp;&emsp;好了，基本的准备工作就这些了,下面真的要进入正题了。\n\n# 安装hexo\nhexo需要全局安装，命令如下：\n\n```\nnpm install -g hexo\n```\n\nlinux和mac用户需要添加权限 \n\n```\nsudo npm install -g hexo\n```\n安装完成之后，接下来我们下载博客模板\n\n# 初始化模板\n 首先我们新建一个文件夹用来放模板，文件夹名字随便起，题材不限，这里以```blog```为例,新建blog文件夹，切换到blog，用hexo给出的命令```hexo init```初始化模板\n\n ```\n mkdir blog \n\n cd blog\n\n hexo init\n ```\n 下载完成时候，blog文件夹内出现以下文件\n \n ![image](https://img-blog.csdnimg.cn/2020042915153328.png)\n 下面介绍以下各个文件的作用\n - scaffolds: 模板文件夹，里边的```.md```文件都是各个模板，比如```page.md```是我们新建页面的模板， post是我们新建博客的模板，我们可以修改这些默认模板\n - source: 资源文件夹\n - themes: 主题文件夹\n - _config.yml: 网站的配置信息，大部分配置都可以在这里修改\n - package.json: 应用程序信息，也装着各种依赖\n\n# 打包成博客\n模板下载好之后，我们就用这个模板打包成博客并启动服务，首先先装一下依赖\n```\nnpm i\n```\n装完之后打包模板\n```\nhexo g\n```\n打包完成之后你会发现在目录下多了一个```public```文件夹,这些文件就是最终生成的博客静态网站，最终都要提交到github发布。\n\n接下来启动服务\n```\nhexo g\n```\n启动完之后控制台生成```http://localhost:4000```网址，打开之后就是这个丑样子：\n\n![image](https://img-blog.csdnimg.cn/20200429162134668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n由于这个主题实在是太丑了，所以接下来我们要美化一下\n\n# 更换主题\nhexo有一个主题库[地址](https://hexo.io/themes/),这里的主题应有，当然如果你都不喜欢，可以即几做一个，方法自己网上找。 我现在用的主题是```freemind.386```,病毒风格，特殊口味。\n以```freemind.386```为例，克隆项目到```theme```目录下\n```\ngit clone git@github.com:blackshow/hexo-theme-freemind.386.git themes/freemind.385\n```\n更改项目目录下```_config.yml```配置文件中的```theme```属性的值为```freemind.386```。注意不是主题文件中的```_config.yml```\n（再次注意，有的的主题是需要下载依赖的，具体看clone的主题目录有没有```package.json```,如果有，需要切换到主题目录执行```npm install```下载依赖包）;\n然后重新打包，启动服务，\n```\nhexo g\nhexo s\n```\n也可以使用组合命令\n```\nhexo s -g\n```\n\n到此为止，主题就更换完了\n\n本人对```freemind.386```这个主题进行了二次封装，修改了一些样式，添加评论插件，欢迎star [github地址](https://github.com/qisi007/hexo-theme-freemind.386.second)\n\n# 部署\n接下来，我们把生成的静态网页部署到github。\n#### (1)配置ssh\n首先，需要配置```ssh```,在命令行输入\n```\nssh-keygen -t rsa -C \"此处填写你的邮件地址\"\n```\n然后疯狂按3次回车就生成好了，我们把生成好的的````ssh```粘贴到github中，命令行输入\n```\ncat ~/.ssh/id_rsa.pub\n```\n复制```ssh```到github中，位置是 【点击github头像】-->【Settings】-->【SSH and GPG keys】--> 【New SSH key】\n\n然后配置git用户信息，防止以后每次提交代码都要输入账号和密码\n```\ngit config --global user.name \"github用户名\"\ngit config --global user.email \"githab注册用的邮箱\"\n```\n\n#### (2)创建博客仓库\n点击github右上角的加号，选择【New responitroy】新建一个仓库，仓库名为 ```你的github名+github.io```\n\n![image](https://img-blog.csdnimg.cn/2020042917304975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n进入仓库，选择【Settings】找到【GitHub Pages】这一项，其中【Source】选择```master branch```,\n下边的主题随便选一个让后commit提交\n\n![image](https://img-blog.csdnimg.cn/20200429174204811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n由于我绑定了域名，所以分配到了该域名的二级域名下，正常情况访问```你的用户名.github.io```应该能访问你的博客了\n\n#### (3)关联仓库地址部署\n上边所有配置完成之后，我们复制该远程仓库地址\n\n![image](https://img-blog.csdnimg.cn/20200429174927885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n\n将改地址复制到本地博客目录的```_config.yml```的```deploy```中\n![image](https://img-blog.csdnimg.cn/2020042917505687.png)\n\n注意远程仓库地址不加```https://```,接下来安装一个插件\n```\nnpm install hexo-deployer-git --save\n```\n安装成功后输入如下命令部署\n```\nhexo d\n```\n出现如下信息部署就成功了，等几分钟访问```你的用户名.github.io```就ojbk了\n\n![image](https://img-blog.csdnimg.cn/20200429175657132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n\n\n# 关联域名\n毕竟上边那种github的地址不容易被人记住，如果有一个自己的地址就再好不过了。其实买个普通的也就几十块钱，少```洗一次脚```能买好几个。我是在腾讯云买的，一年21块大洋。[购买传送门](https://dnspod.cloud.tencent.com/)\n\n完成支付之后，进入控制台，绑定域名之前需要```邮箱验证```和```实名认证```，用不多长时间，几分钟搞定。然后点击进行解析域名，操作路径为【我的域名】-->【解析】\n\n![image](https://img-blog.csdnimg.cn/20200429182104444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n解析需要github仓库服务的ip,获取方法为在命令行输入\n```\nping 服务地址   // 例如 liuguisheng.github.io\n```\n获取后在腾讯云控制台配置如下\n\n![image](https://img-blog.csdnimg.cn/20200429182546851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n具体配置参入里边都有介绍，这里我就不多说了，接下来进行github设置\n\n在项目的【source】文件夹下新建```CNAME```文件（没有后缀）,里边填写你的域名。重新打包发布等几分钟就能访问你的域名了。 ×注意网上有的方法是直接在远程仓库的根目录下直接新建```CNAME```文件，不要那么干，因为你每次部署的时候都会把这个文件冲调，放在【source】文件的原因是hexo编译的时候会把里边的文件原封不动复制到【public】文件夹下。\n\n到现在为止基本的部署的工作都做完了，接下来94要看看我们如何写博客了\n\n# 发布博客\n\n发布博客很简单，命令行输入\n```\nhexo new '博客名称'\n```\n完成后hexo会在【source】中的【_posts】文件生成一个```mardown```文件，在里边编辑博客就可以了\n\nmardown文件头部部分可以添加的属性说明\n\n    - title----------博客名称\n    - date-----------发布日期\n    - categories-----分类\n    - tags-----------标签\n    - preview--------列表页最多展示多少个文字\n    - toc------------是否添加目录结构\n\n如果你想修改默模板可以去【scaffolds】文件夹下修改```post.md```文件\n\n# hexo 命令汇总\n#### (1)基本命令\n\n描述 | 命令 | 缩写\n--- | --- | --- \n生成静态页面 | hexo generate | hexo g\n开启服务 | hexo server | hexo s\n部署到github | hexo deploy | hexo d\n新建文章 | hexo new \"articleName\" | -\n新建页面 | hexo new page \"htmlName\" | -\n查看帮助 | hexo help | - \n查看hexo版本号 | hexo version\n\n#### (2)组合命令\n描述 | 命令 |\n--- | --- |  \n生成页面并预览 | hexo s -g | \n生成页面并上传到github | hexo d -g | \n\n\n# 添加标签页和分类页面\n\n#### (1)标签页\n命令行输入\n```\nhexo new page \"tags\"\n```\n这是hexo会在【soruce】文件夹下生成一个【tags】文件夹，修改该文件夹下的```index.md```,替换里边的内容为\n```\n---\ntitle: tags\ndate: 2020-04-28 17:15:54\ntype: \"tags\" \nlayout: \"tags\" \n---\n\n```\n然后修改【theme】文件夹下的```_config.yml```的menu,添加如下配置\n\n![image](https://img-blog.csdnimg.cn/2020042918543177.png)\n\n重新打包部署即可\n\n\n#### (2)分类页面\n分类页面和标签页类似，命令行输入\n```\nhexo new page \"categories\"\n```\n这是hexo会在【soruce】文件夹下生成一个【tags】文件夹，修改该文件夹下的```index.md```,替换里边的内容为\n```\n---\ntitle: categories\ndate: 2020-04-28 16:46:27\ntype: \"categories\"\nlayout: \"categories\"\ncomments: false\n---\n\n\n```\n然后修改【theme】文件夹下的```_config.yml```的menu,添加如下配置\n\n![image](https://img-blog.csdnimg.cn/20200429185756736.png)\n\n重新打包部署即可\n\n# 添加评论插件\n网上的评论插件很多，但是最终我选择了```valine```, valine有一个自己的评论管理后台```leancloud```,每次读者在博客的评论都会流入leancloud后台。\n但是，```freemind.386```这个主题没有集成valine,后来从网上找了方法，改造了一下主题，如果其他主题没有集成valine,也可以用下边的方法。\n\n具体方法是在主题目录的【layout】-->【_partial】-->【post】文件夹下新建```valine.ejs```文件，里边填写如下代码\n```\n<div id=\"comment\"></div>\n<script src='//unpkg.com/valine/dist/Valine.min.js'></script>\n<script>\nnew Valine({\n    el: '#comment' ,\n    notify:true, \n    verify:true, \n    appId: '<%=theme.valine.appId%>',\n    appKey: '<%=theme.valine.appKey%>',\n    placeholder: '<%=theme.valine.appKey%>',\n    path:window.location.pathname, \n    avatar:'mm' \n});\n</script>\n```\n\n然后在主题目录的【layout】-->【_partial】的```article.ejs```文件中找到\n\n```\n\t<%- partial('post/comment', {page: item}) %>\n```\n这行代码下面填写\n\n```\n<% if (theme.valine && theme.valine.appId && theme.valine.appKey){ %>\n\t\t<section id=\"comments\" class=\"comments\">\n\t\t\t<style>\n\t\t\t.comments{padding:10px;background:#fff}\n\t\t\t@media screen and (max-width:800px){.comments{margin:auto;padding:10px;background:#000}}\n\t\t\t</style>\n\t\t\t<%- partial('post/valine', {\n\t\t\tkey: post.slug,\n\t\t\ttitle: post.title,\n\t\t\turl: config.url+url_for(post.path)\n\t\t\t}) %>\n\t\t</section>\n\t<% } %>\n```\n我把修改好的主题上传到我的github中，可以自行clone到【themes】文件夹下， [传送门](https://github.com/qisi007/hexo-theme-freemind.386.second)。\n\n\n上述工作完成后我们看看怎么添加valine评论插件。 \n\n首先去leancloud官网注册账号[传送门](https://leancloud.cn/)。注册完成之后进个人管理页面```添加应用```,输入应用名称，下边选开发板\n\n![image](https://img-blog.csdnimg.cn/20200430114031590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n点击设置按钮\n\n![image](https://img-blog.csdnimg.cn/20200430114551854.png)\n\n\n点击左边【存储】-->【创建class】,新建两个类用来存储评论，分别是```Comment```和```Counter```\n\n然后点击左边【设置】-->【安全中心】把没用的服务都关掉\n\n![image](https://img-blog.csdnimg.cn/20200430114909833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n然后点击【应用Keys】记录下```AppID```和```AppKey```,这两个是需要配置到项目中的\n\n最后在主题文件夹的```_config.yml```配置文件中添加如下代码，把```AppID```和```AppKey```添加到对应位置\n\n```\nvaline:\n  enable: true # 是否开启\n  appId:    # 上一步获取的 App ID\n  appKey:   # 上一步获取的 App Key\n  notify: true # 新留言是否需要通知 https://github.com/xCss/Valine/wiki\n  verify: true # 是否需要验证，验证比较反人类建议false关闭\n  placeholder: 请在此输入您的留言 # 默认留言框内的文字\n  avatar: mm # 默认头像\n  guest_info: nick,mail # 默认留言框的头部需要访问者输入的信息\n  pageSize: 10 # pagination size #默认单页的留言条数\n```\n\n最后执行```hexo d -g```打包部署，访问域名应该就可以了\n\n![image](https://img-blog.csdnimg.cn/20200430115425744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n\n\n好了，到现在可以拿着自己的网站出去装逼了，其实还有很多功能，只不过我现在没有研究，比如```相册```，```音乐播放器```等，等我以后有时间弄出来之后再分享给大家。\n\n我把我搭建的博客代码仓库地址也上传到了我的github中[传送门](https://github.com/qisi007/website-code-save)；\n\n[我的个人主页地址](https://www.liuguisheng.vip/)\n\n最后感谢下边博客的博主提供的帮助，小心心送上❤❤；\n\n感谢:\n\n[三分钟在GitHub上搭建个人博客](https://zhuanlan.zhihu.com/p/28321740)\n\n[使用hexo+github搭建免费个人博客详细教程](https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html)\n\n\n\n","slug":"程序员标配-使用hexo-github搭建个人博客","published":1,"updated":"2020-09-22T07:19:37.669Z","_id":"ckf0hztmp0002ooufepaa0a8c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>&emsp;&emsp;作为一名合格的程序员，拥有一个自己的个人网站，那想必是非常舒服了。我们可以在里边写写技术博客，发发牢骚，记录自己的生活。当然，我们可以在博客园，掘金的博客网站发表，但是那毕竟是人家的东西，我们应该试着搭建一个自己的博客。但是，做网站就要买服务器，买服务器就要花钱，这对于我们这帮屌丝程序员来说当然是不太友好，这时候，我们就想到一个搭建很熟悉的东西–github。<br>&emsp;&emsp;github作为世界上最大的同性交友基地，它除了能为广大男性同胞带来灵魂上的快感，还有一个巨大的作用，那就是可以充当一个小型的服务器。</p>\n<p>&emsp;&emsp;<strong>使用gitlab搭建个人博客的好处非常多，比如：</strong></p>\n<ol>\n<li>访问速度快，仓库里只需放打包好的静态页面</li>\n<li>构建快，代码push到远程仓库后，分分钟构建完</li>\n<li>免费（当然这是最大的好处）</li>\n<li>易于管理，这得益于github超强的代码管理能力，比如分支，版本回退等</li>\n<li>可以绑定自己的域名</li>\n</ol>\n<p>&emsp;&emsp;常见的博客生成工具有两种，一个是<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo</a>,另一个是<a href=\"http://jekyllcn.com/\" target=\"_blank\" rel=\"noopener\">jekyll</a>。两者其实大同小异，但是jekyll语法和配置相对于复杂，它需要ruby环境。而hexo就比较简单易上手，只需要node环境就ok了。下面我们进入正题，详细介绍如何使用hexo+github搭建个人博客。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ol>\n<li>首先你得有一个github账号吧，注册过程这里不做过多介绍了。<a href=\"https://github.com/join?source=header-home\">注册账号点这里</a></li>\n<li>配置node环境,根据系统下载好node安装包，一路下一步安装就ok了。<a href=\"https://nodejs.org/zh-cn/download/\" target=\"_blank\" rel=\"noopener\">node下载</a></li>\n<li>shell工具，这个可以自行选择，比如cmd，powerShell,git等，建议使用<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">git</a></li>\n<li>如果你想要自己的域名，可以花钱去申请一个，一般点的域名也不是太贵，一年几十块钱，其实这点钱对于程序员也不算什么，少买件格子衫就有了。</li>\n</ol>\n<p>&emsp;&emsp;好了，基本的准备工作就这些了,下面真的要进入正题了。</p>\n<h1 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h1><p>hexo需要全局安装，命令如下：</p>\n<pre><code>npm install -g hexo</code></pre><p>linux和mac用户需要添加权限 </p>\n<pre><code>sudo npm install -g hexo</code></pre><p>安装完成之后，接下来我们下载博客模板</p>\n<h1 id=\"初始化模板\"><a href=\"#初始化模板\" class=\"headerlink\" title=\"初始化模板\"></a>初始化模板</h1><p> 首先我们新建一个文件夹用来放模板，文件夹名字随便起，题材不限，这里以<code>blog</code>为例,新建blog文件夹，切换到blog，用hexo给出的命令<code>hexo init</code>初始化模板</p>\n<pre><code> mkdir blog \n\n cd blog\n\n hexo init</code></pre><p> 下载完成时候，blog文件夹内出现以下文件</p>\n<p> <img src=\"https://img-blog.csdnimg.cn/2020042915153328.png\" alt=\"image\"><br> 下面介绍以下各个文件的作用</p>\n<ul>\n<li>scaffolds: 模板文件夹，里边的<code>.md</code>文件都是各个模板，比如<code>page.md</code>是我们新建页面的模板， post是我们新建博客的模板，我们可以修改这些默认模板</li>\n<li>source: 资源文件夹</li>\n<li>themes: 主题文件夹</li>\n<li>_config.yml: 网站的配置信息，大部分配置都可以在这里修改</li>\n<li>package.json: 应用程序信息，也装着各种依赖</li>\n</ul>\n<h1 id=\"打包成博客\"><a href=\"#打包成博客\" class=\"headerlink\" title=\"打包成博客\"></a>打包成博客</h1><p>模板下载好之后，我们就用这个模板打包成博客并启动服务，首先先装一下依赖</p>\n<pre><code>npm i</code></pre><p>装完之后打包模板</p>\n<pre><code>hexo g</code></pre><p>打包完成之后你会发现在目录下多了一个<code>public</code>文件夹,这些文件就是最终生成的博客静态网站，最终都要提交到github发布。</p>\n<p>接下来启动服务</p>\n<pre><code>hexo g</code></pre><p>启动完之后控制台生成<code>http://localhost:4000</code>网址，打开之后就是这个丑样子：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200429162134668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>由于这个主题实在是太丑了，所以接下来我们要美化一下</p>\n<h1 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h1><p>hexo有一个主题库<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">地址</a>,这里的主题应有，当然如果你都不喜欢，可以即几做一个，方法自己网上找。 我现在用的主题是<code>freemind.386</code>,病毒风格，特殊口味。<br>以<code>freemind.386</code>为例，克隆项目到<code>theme</code>目录下</p>\n<pre><code>git clone git@github.com:blackshow/hexo-theme-freemind.386.git themes/freemind.385</code></pre><p>更改项目目录下<code>_config.yml</code>配置文件中的<code>theme</code>属性的值为<code>freemind.386</code>。注意不是主题文件中的<code>_config.yml</code><br>（再次注意，有的的主题是需要下载依赖的，具体看clone的主题目录有没有<code>package.json</code>,如果有，需要切换到主题目录执行<code>npm install</code>下载依赖包）;<br>然后重新打包，启动服务，</p>\n<pre><code>hexo g\nhexo s</code></pre><p>也可以使用组合命令</p>\n<pre><code>hexo s -g</code></pre><p>到此为止，主题就更换完了</p>\n<p>本人对<code>freemind.386</code>这个主题进行了二次封装，修改了一些样式，添加评论插件，欢迎star <a href=\"https://github.com/qisi007/hexo-theme-freemind.386.second\">github地址</a></p>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>接下来，我们把生成的静态网页部署到github。</p>\n<h4 id=\"1-配置ssh\"><a href=\"#1-配置ssh\" class=\"headerlink\" title=\"(1)配置ssh\"></a>(1)配置ssh</h4><p>首先，需要配置<code>ssh</code>,在命令行输入</p>\n<pre><code>ssh-keygen -t rsa -C &quot;此处填写你的邮件地址&quot;</code></pre><p>然后疯狂按3次回车就生成好了，我们把生成好的的````ssh```粘贴到github中，命令行输入</p>\n<pre><code>cat ~/.ssh/id_rsa.pub</code></pre><p>复制<code>ssh</code>到github中，位置是 【点击github头像】–&gt;【Settings】–&gt;【SSH and GPG keys】–&gt; 【New SSH key】</p>\n<p>然后配置git用户信息，防止以后每次提交代码都要输入账号和密码</p>\n<pre><code>git config --global user.name &quot;github用户名&quot;\ngit config --global user.email &quot;githab注册用的邮箱&quot;</code></pre><h4 id=\"2-创建博客仓库\"><a href=\"#2-创建博客仓库\" class=\"headerlink\" title=\"(2)创建博客仓库\"></a>(2)创建博客仓库</h4><p>点击github右上角的加号，选择【New responitroy】新建一个仓库，仓库名为 <code>你的github名+github.io</code></p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020042917304975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>进入仓库，选择【Settings】找到【GitHub Pages】这一项，其中【Source】选择<code>master branch</code>,<br>下边的主题随便选一个让后commit提交</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200429174204811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>由于我绑定了域名，所以分配到了该域名的二级域名下，正常情况访问<code>你的用户名.github.io</code>应该能访问你的博客了</p>\n<h4 id=\"3-关联仓库地址部署\"><a href=\"#3-关联仓库地址部署\" class=\"headerlink\" title=\"(3)关联仓库地址部署\"></a>(3)关联仓库地址部署</h4><p>上边所有配置完成之后，我们复制该远程仓库地址</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200429174927885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>将改地址复制到本地博客目录的<code>_config.yml</code>的<code>deploy</code>中<br><img src=\"https://img-blog.csdnimg.cn/2020042917505687.png\" alt=\"image\"></p>\n<p>注意远程仓库地址不加<code>https://</code>,接下来安装一个插件</p>\n<pre><code>npm install hexo-deployer-git --save</code></pre><p>安装成功后输入如下命令部署</p>\n<pre><code>hexo d</code></pre><p>出现如下信息部署就成功了，等几分钟访问<code>你的用户名.github.io</code>就ojbk了</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200429175657132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<h1 id=\"关联域名\"><a href=\"#关联域名\" class=\"headerlink\" title=\"关联域名\"></a>关联域名</h1><p>毕竟上边那种github的地址不容易被人记住，如果有一个自己的地址就再好不过了。其实买个普通的也就几十块钱，少<code>洗一次脚</code>能买好几个。我是在腾讯云买的，一年21块大洋。<a href=\"https://dnspod.cloud.tencent.com/\" target=\"_blank\" rel=\"noopener\">购买传送门</a></p>\n<p>完成支付之后，进入控制台，绑定域名之前需要<code>邮箱验证</code>和<code>实名认证</code>，用不多长时间，几分钟搞定。然后点击进行解析域名，操作路径为【我的域名】–&gt;【解析】</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200429182104444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>解析需要github仓库服务的ip,获取方法为在命令行输入</p>\n<pre><code>ping 服务地址   // 例如 liuguisheng.github.io</code></pre><p>获取后在腾讯云控制台配置如下</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200429182546851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>具体配置参入里边都有介绍，这里我就不多说了，接下来进行github设置</p>\n<p>在项目的【source】文件夹下新建<code>CNAME</code>文件（没有后缀）,里边填写你的域名。重新打包发布等几分钟就能访问你的域名了。 ×注意网上有的方法是直接在远程仓库的根目录下直接新建<code>CNAME</code>文件，不要那么干，因为你每次部署的时候都会把这个文件冲调，放在【source】文件的原因是hexo编译的时候会把里边的文件原封不动复制到【public】文件夹下。</p>\n<p>到现在为止基本的部署的工作都做完了，接下来94要看看我们如何写博客了</p>\n<h1 id=\"发布博客\"><a href=\"#发布博客\" class=\"headerlink\" title=\"发布博客\"></a>发布博客</h1><p>发布博客很简单，命令行输入</p>\n<pre><code>hexo new &#39;博客名称&#39;</code></pre><p>完成后hexo会在【source】中的【_posts】文件生成一个<code>mardown</code>文件，在里边编辑博客就可以了</p>\n<p>mardown文件头部部分可以添加的属性说明</p>\n<pre><code>- title----------博客名称\n- date-----------发布日期\n- categories-----分类\n- tags-----------标签\n- preview--------列表页最多展示多少个文字\n- toc------------是否添加目录结构</code></pre><p>如果你想修改默模板可以去【scaffolds】文件夹下修改<code>post.md</code>文件</p>\n<h1 id=\"hexo-命令汇总\"><a href=\"#hexo-命令汇总\" class=\"headerlink\" title=\"hexo 命令汇总\"></a>hexo 命令汇总</h1><h4 id=\"1-基本命令\"><a href=\"#1-基本命令\" class=\"headerlink\" title=\"(1)基本命令\"></a>(1)基本命令</h4><table>\n<thead>\n<tr>\n<th>描述</th>\n<th>命令</th>\n<th>缩写</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>生成静态页面</td>\n<td>hexo generate</td>\n<td>hexo g</td>\n</tr>\n<tr>\n<td>开启服务</td>\n<td>hexo server</td>\n<td>hexo s</td>\n</tr>\n<tr>\n<td>部署到github</td>\n<td>hexo deploy</td>\n<td>hexo d</td>\n</tr>\n<tr>\n<td>新建文章</td>\n<td>hexo new “articleName”</td>\n<td>-</td>\n</tr>\n<tr>\n<td>新建页面</td>\n<td>hexo new page “htmlName”</td>\n<td>-</td>\n</tr>\n<tr>\n<td>查看帮助</td>\n<td>hexo help</td>\n<td>-</td>\n</tr>\n<tr>\n<td>查看hexo版本号</td>\n<td>hexo version</td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"2-组合命令\"><a href=\"#2-组合命令\" class=\"headerlink\" title=\"(2)组合命令\"></a>(2)组合命令</h4><table>\n<thead>\n<tr>\n<th>描述</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>生成页面并预览</td>\n<td>hexo s -g</td>\n</tr>\n<tr>\n<td>生成页面并上传到github</td>\n<td>hexo d -g</td>\n</tr>\n</tbody></table>\n<h1 id=\"添加标签页和分类页面\"><a href=\"#添加标签页和分类页面\" class=\"headerlink\" title=\"添加标签页和分类页面\"></a>添加标签页和分类页面</h1><h4 id=\"1-标签页\"><a href=\"#1-标签页\" class=\"headerlink\" title=\"(1)标签页\"></a>(1)标签页</h4><p>命令行输入</p>\n<pre><code>hexo new page &quot;tags&quot;</code></pre><p>这是hexo会在【soruce】文件夹下生成一个【tags】文件夹，修改该文件夹下的<code>index.md</code>,替换里边的内容为</p>\n<pre><code>---\ntitle: tags\ndate: 2020-04-28 17:15:54\ntype: &quot;tags&quot; \nlayout: &quot;tags&quot; \n---\n</code></pre><p>然后修改【theme】文件夹下的<code>_config.yml</code>的menu,添加如下配置</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020042918543177.png\" alt=\"image\"></p>\n<p>重新打包部署即可</p>\n<h4 id=\"2-分类页面\"><a href=\"#2-分类页面\" class=\"headerlink\" title=\"(2)分类页面\"></a>(2)分类页面</h4><p>分类页面和标签页类似，命令行输入</p>\n<pre><code>hexo new page &quot;categories&quot;</code></pre><p>这是hexo会在【soruce】文件夹下生成一个【tags】文件夹，修改该文件夹下的<code>index.md</code>,替换里边的内容为</p>\n<pre><code>---\ntitle: categories\ndate: 2020-04-28 16:46:27\ntype: &quot;categories&quot;\nlayout: &quot;categories&quot;\ncomments: false\n---\n\n</code></pre><p>然后修改【theme】文件夹下的<code>_config.yml</code>的menu,添加如下配置</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200429185756736.png\" alt=\"image\"></p>\n<p>重新打包部署即可</p>\n<h1 id=\"添加评论插件\"><a href=\"#添加评论插件\" class=\"headerlink\" title=\"添加评论插件\"></a>添加评论插件</h1><p>网上的评论插件很多，但是最终我选择了<code>valine</code>, valine有一个自己的评论管理后台<code>leancloud</code>,每次读者在博客的评论都会流入leancloud后台。<br>但是，<code>freemind.386</code>这个主题没有集成valine,后来从网上找了方法，改造了一下主题，如果其他主题没有集成valine,也可以用下边的方法。</p>\n<p>具体方法是在主题目录的【layout】–&gt;【_partial】–&gt;【post】文件夹下新建<code>valine.ejs</code>文件，里边填写如下代码</p>\n<pre><code>&lt;div id=&quot;comment&quot;&gt;&lt;/div&gt;\n&lt;script src=&#39;//unpkg.com/valine/dist/Valine.min.js&#39;&gt;&lt;/script&gt;\n&lt;script&gt;\nnew Valine({\n    el: &#39;#comment&#39; ,\n    notify:true, \n    verify:true, \n    appId: &#39;&lt;%=theme.valine.appId%&gt;&#39;,\n    appKey: &#39;&lt;%=theme.valine.appKey%&gt;&#39;,\n    placeholder: &#39;&lt;%=theme.valine.appKey%&gt;&#39;,\n    path:window.location.pathname, \n    avatar:&#39;mm&#39; \n});\n&lt;/script&gt;</code></pre><p>然后在主题目录的【layout】–&gt;【_partial】的<code>article.ejs</code>文件中找到</p>\n<pre><code>    &lt;%- partial(&#39;post/comment&#39;, {page: item}) %&gt;</code></pre><p>这行代码下面填写</p>\n<pre><code>&lt;% if (theme.valine &amp;&amp; theme.valine.appId &amp;&amp; theme.valine.appKey){ %&gt;\n        &lt;section id=&quot;comments&quot; class=&quot;comments&quot;&gt;\n            &lt;style&gt;\n            .comments{padding:10px;background:#fff}\n            @media screen and (max-width:800px){.comments{margin:auto;padding:10px;background:#000}}\n            &lt;/style&gt;\n            &lt;%- partial(&#39;post/valine&#39;, {\n            key: post.slug,\n            title: post.title,\n            url: config.url+url_for(post.path)\n            }) %&gt;\n        &lt;/section&gt;\n    &lt;% } %&gt;</code></pre><p>我把修改好的主题上传到我的github中，可以自行clone到【themes】文件夹下， <a href=\"https://github.com/qisi007/hexo-theme-freemind.386.second\">传送门</a>。</p>\n<p>上述工作完成后我们看看怎么添加valine评论插件。 </p>\n<p>首先去leancloud官网注册账号<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">传送门</a>。注册完成之后进个人管理页面<code>添加应用</code>,输入应用名称，下边选开发板</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200430114031590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>点击设置按钮</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200430114551854.png\" alt=\"image\"></p>\n<p>点击左边【存储】–&gt;【创建class】,新建两个类用来存储评论，分别是<code>Comment</code>和<code>Counter</code></p>\n<p>然后点击左边【设置】–&gt;【安全中心】把没用的服务都关掉</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200430114909833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>然后点击【应用Keys】记录下<code>AppID</code>和<code>AppKey</code>,这两个是需要配置到项目中的</p>\n<p>最后在主题文件夹的<code>_config.yml</code>配置文件中添加如下代码，把<code>AppID</code>和<code>AppKey</code>添加到对应位置</p>\n<pre><code>valine:\n  enable: true # 是否开启\n  appId:    # 上一步获取的 App ID\n  appKey:   # 上一步获取的 App Key\n  notify: true # 新留言是否需要通知 https://github.com/xCss/Valine/wiki\n  verify: true # 是否需要验证，验证比较反人类建议false关闭\n  placeholder: 请在此输入您的留言 # 默认留言框内的文字\n  avatar: mm # 默认头像\n  guest_info: nick,mail # 默认留言框的头部需要访问者输入的信息\n  pageSize: 10 # pagination size #默认单页的留言条数</code></pre><p>最后执行<code>hexo d -g</code>打包部署，访问域名应该就可以了</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200430115425744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>好了，到现在可以拿着自己的网站出去装逼了，其实还有很多功能，只不过我现在没有研究，比如<code>相册</code>，<code>音乐播放器</code>等，等我以后有时间弄出来之后再分享给大家。</p>\n<p>我把我搭建的博客代码仓库地址也上传到了我的github中<a href=\"https://github.com/qisi007/website-code-save\">传送门</a>；</p>\n<p><a href=\"https://www.liuguisheng.vip/\" target=\"_blank\" rel=\"noopener\">我的个人主页地址</a></p>\n<p>最后感谢下边博客的博主提供的帮助，小心心送上❤❤；</p>\n<p>感谢:</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/28321740\" target=\"_blank\" rel=\"noopener\">三分钟在GitHub上搭建个人博客</a></p>\n<p><a href=\"https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html\" target=\"_blank\" rel=\"noopener\">使用hexo+github搭建免费个人博客详细教程</a></p>\n","site":{"data":{"galleries":[{"name":"2017","cover":"https://img-blog.csdnimg.cn/20191201090129350.jpg","description":"2017年记录","photos":["https://img-blog.csdnimg.cn/20191201090129350.jpg","https://img-blog.csdnimg.cn/20200216200900531.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70"]}]}},"excerpt":"作为一名合格的程序员，拥有一个自己的个人网站，那想必是非常舒服了。我们可以在里边写写技术博客，发发牢骚，记录自己的生活。当然，我们可以在博客园，掘金的博客网站发表，但是那毕竟是人家的东西，我们应该试着搭建一个自己的博客。但是，做网站就要买服务器，买服务器就要花钱，这对于我们这帮屌丝程序员来说当然是不太友好，这时候，我们就想到一个搭建很熟悉的东西–github。\ngithub作为世界上最大的同性交友基地，它除了能为广大男性同胞带来灵魂上的快感，还有一个巨大的作用，那就是可以充当一个小型的服务器。\n\n使用gitlab搭建个人博客的好处非常多，比如：\n\n 1. 访问速度快，仓库里只需放打包好的静态页","more":"<p>&emsp;&emsp;作为一名合格的程序员，拥有一个自己的个人网站，那想必是非常舒服了。我们可以在里边写写技术博客，发发牢骚，记录自己的生活。当然，我们可以在博客园，掘金的博客网站发表，但是那毕竟是人家的东西，我们应该试着搭建一个自己的博客。但是，做网站就要买服务器，买服务器就要花钱，这对于我们这帮屌丝程序员来说当然是不太友好，这时候，我们就想到一个搭建很熟悉的东西–github。<br>&emsp;&emsp;github作为世界上最大的同性交友基地，它除了能为广大男性同胞带来灵魂上的快感，还有一个巨大的作用，那就是可以充当一个小型的服务器。</p>\n<p>&emsp;&emsp;<strong>使用gitlab搭建个人博客的好处非常多，比如：</strong></p>\n<ol>\n<li>访问速度快，仓库里只需放打包好的静态页面</li>\n<li>构建快，代码push到远程仓库后，分分钟构建完</li>\n<li>免费（当然这是最大的好处）</li>\n<li>易于管理，这得益于github超强的代码管理能力，比如分支，版本回退等</li>\n<li>可以绑定自己的域名</li>\n</ol>\n<p>&emsp;&emsp;常见的博客生成工具有两种，一个是<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo</a>,另一个是<a href=\"http://jekyllcn.com/\" target=\"_blank\" rel=\"noopener\">jekyll</a>。两者其实大同小异，但是jekyll语法和配置相对于复杂，它需要ruby环境。而hexo就比较简单易上手，只需要node环境就ok了。下面我们进入正题，详细介绍如何使用hexo+github搭建个人博客。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ol>\n<li>首先你得有一个github账号吧，注册过程这里不做过多介绍了。<a href=\"https://github.com/join?source=header-home\">注册账号点这里</a></li>\n<li>配置node环境,根据系统下载好node安装包，一路下一步安装就ok了。<a href=\"https://nodejs.org/zh-cn/download/\" target=\"_blank\" rel=\"noopener\">node下载</a></li>\n<li>shell工具，这个可以自行选择，比如cmd，powerShell,git等，建议使用<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">git</a></li>\n<li>如果你想要自己的域名，可以花钱去申请一个，一般点的域名也不是太贵，一年几十块钱，其实这点钱对于程序员也不算什么，少买件格子衫就有了。</li>\n</ol>\n<p>&emsp;&emsp;好了，基本的准备工作就这些了,下面真的要进入正题了。</p>\n<h1 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h1><p>hexo需要全局安装，命令如下：</p>\n<pre><code>npm install -g hexo</code></pre><p>linux和mac用户需要添加权限 </p>\n<pre><code>sudo npm install -g hexo</code></pre><p>安装完成之后，接下来我们下载博客模板</p>\n<h1 id=\"初始化模板\"><a href=\"#初始化模板\" class=\"headerlink\" title=\"初始化模板\"></a>初始化模板</h1><p> 首先我们新建一个文件夹用来放模板，文件夹名字随便起，题材不限，这里以<code>blog</code>为例,新建blog文件夹，切换到blog，用hexo给出的命令<code>hexo init</code>初始化模板</p>\n<pre><code> mkdir blog \n\n cd blog\n\n hexo init</code></pre><p> 下载完成时候，blog文件夹内出现以下文件</p>\n<p> <img src=\"https://img-blog.csdnimg.cn/2020042915153328.png\" alt=\"image\"><br> 下面介绍以下各个文件的作用</p>\n<ul>\n<li>scaffolds: 模板文件夹，里边的<code>.md</code>文件都是各个模板，比如<code>page.md</code>是我们新建页面的模板， post是我们新建博客的模板，我们可以修改这些默认模板</li>\n<li>source: 资源文件夹</li>\n<li>themes: 主题文件夹</li>\n<li>_config.yml: 网站的配置信息，大部分配置都可以在这里修改</li>\n<li>package.json: 应用程序信息，也装着各种依赖</li>\n</ul>\n<h1 id=\"打包成博客\"><a href=\"#打包成博客\" class=\"headerlink\" title=\"打包成博客\"></a>打包成博客</h1><p>模板下载好之后，我们就用这个模板打包成博客并启动服务，首先先装一下依赖</p>\n<pre><code>npm i</code></pre><p>装完之后打包模板</p>\n<pre><code>hexo g</code></pre><p>打包完成之后你会发现在目录下多了一个<code>public</code>文件夹,这些文件就是最终生成的博客静态网站，最终都要提交到github发布。</p>\n<p>接下来启动服务</p>\n<pre><code>hexo g</code></pre><p>启动完之后控制台生成<code>http://localhost:4000</code>网址，打开之后就是这个丑样子：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200429162134668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>由于这个主题实在是太丑了，所以接下来我们要美化一下</p>\n<h1 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h1><p>hexo有一个主题库<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">地址</a>,这里的主题应有，当然如果你都不喜欢，可以即几做一个，方法自己网上找。 我现在用的主题是<code>freemind.386</code>,病毒风格，特殊口味。<br>以<code>freemind.386</code>为例，克隆项目到<code>theme</code>目录下</p>\n<pre><code>git clone git@github.com:blackshow/hexo-theme-freemind.386.git themes/freemind.385</code></pre><p>更改项目目录下<code>_config.yml</code>配置文件中的<code>theme</code>属性的值为<code>freemind.386</code>。注意不是主题文件中的<code>_config.yml</code><br>（再次注意，有的的主题是需要下载依赖的，具体看clone的主题目录有没有<code>package.json</code>,如果有，需要切换到主题目录执行<code>npm install</code>下载依赖包）;<br>然后重新打包，启动服务，</p>\n<pre><code>hexo g\nhexo s</code></pre><p>也可以使用组合命令</p>\n<pre><code>hexo s -g</code></pre><p>到此为止，主题就更换完了</p>\n<p>本人对<code>freemind.386</code>这个主题进行了二次封装，修改了一些样式，添加评论插件，欢迎star <a href=\"https://github.com/qisi007/hexo-theme-freemind.386.second\">github地址</a></p>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>接下来，我们把生成的静态网页部署到github。</p>\n<h4 id=\"1-配置ssh\"><a href=\"#1-配置ssh\" class=\"headerlink\" title=\"(1)配置ssh\"></a>(1)配置ssh</h4><p>首先，需要配置<code>ssh</code>,在命令行输入</p>\n<pre><code>ssh-keygen -t rsa -C &quot;此处填写你的邮件地址&quot;</code></pre><p>然后疯狂按3次回车就生成好了，我们把生成好的的````ssh```粘贴到github中，命令行输入</p>\n<pre><code>cat ~/.ssh/id_rsa.pub</code></pre><p>复制<code>ssh</code>到github中，位置是 【点击github头像】–&gt;【Settings】–&gt;【SSH and GPG keys】–&gt; 【New SSH key】</p>\n<p>然后配置git用户信息，防止以后每次提交代码都要输入账号和密码</p>\n<pre><code>git config --global user.name &quot;github用户名&quot;\ngit config --global user.email &quot;githab注册用的邮箱&quot;</code></pre><h4 id=\"2-创建博客仓库\"><a href=\"#2-创建博客仓库\" class=\"headerlink\" title=\"(2)创建博客仓库\"></a>(2)创建博客仓库</h4><p>点击github右上角的加号，选择【New responitroy】新建一个仓库，仓库名为 <code>你的github名+github.io</code></p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020042917304975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>进入仓库，选择【Settings】找到【GitHub Pages】这一项，其中【Source】选择<code>master branch</code>,<br>下边的主题随便选一个让后commit提交</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200429174204811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>由于我绑定了域名，所以分配到了该域名的二级域名下，正常情况访问<code>你的用户名.github.io</code>应该能访问你的博客了</p>\n<h4 id=\"3-关联仓库地址部署\"><a href=\"#3-关联仓库地址部署\" class=\"headerlink\" title=\"(3)关联仓库地址部署\"></a>(3)关联仓库地址部署</h4><p>上边所有配置完成之后，我们复制该远程仓库地址</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200429174927885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>将改地址复制到本地博客目录的<code>_config.yml</code>的<code>deploy</code>中<br><img src=\"https://img-blog.csdnimg.cn/2020042917505687.png\" alt=\"image\"></p>\n<p>注意远程仓库地址不加<code>https://</code>,接下来安装一个插件</p>\n<pre><code>npm install hexo-deployer-git --save</code></pre><p>安装成功后输入如下命令部署</p>\n<pre><code>hexo d</code></pre><p>出现如下信息部署就成功了，等几分钟访问<code>你的用户名.github.io</code>就ojbk了</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200429175657132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<h1 id=\"关联域名\"><a href=\"#关联域名\" class=\"headerlink\" title=\"关联域名\"></a>关联域名</h1><p>毕竟上边那种github的地址不容易被人记住，如果有一个自己的地址就再好不过了。其实买个普通的也就几十块钱，少<code>洗一次脚</code>能买好几个。我是在腾讯云买的，一年21块大洋。<a href=\"https://dnspod.cloud.tencent.com/\" target=\"_blank\" rel=\"noopener\">购买传送门</a></p>\n<p>完成支付之后，进入控制台，绑定域名之前需要<code>邮箱验证</code>和<code>实名认证</code>，用不多长时间，几分钟搞定。然后点击进行解析域名，操作路径为【我的域名】–&gt;【解析】</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200429182104444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>解析需要github仓库服务的ip,获取方法为在命令行输入</p>\n<pre><code>ping 服务地址   // 例如 liuguisheng.github.io</code></pre><p>获取后在腾讯云控制台配置如下</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200429182546851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>具体配置参入里边都有介绍，这里我就不多说了，接下来进行github设置</p>\n<p>在项目的【source】文件夹下新建<code>CNAME</code>文件（没有后缀）,里边填写你的域名。重新打包发布等几分钟就能访问你的域名了。 ×注意网上有的方法是直接在远程仓库的根目录下直接新建<code>CNAME</code>文件，不要那么干，因为你每次部署的时候都会把这个文件冲调，放在【source】文件的原因是hexo编译的时候会把里边的文件原封不动复制到【public】文件夹下。</p>\n<p>到现在为止基本的部署的工作都做完了，接下来94要看看我们如何写博客了</p>\n<h1 id=\"发布博客\"><a href=\"#发布博客\" class=\"headerlink\" title=\"发布博客\"></a>发布博客</h1><p>发布博客很简单，命令行输入</p>\n<pre><code>hexo new &#39;博客名称&#39;</code></pre><p>完成后hexo会在【source】中的【_posts】文件生成一个<code>mardown</code>文件，在里边编辑博客就可以了</p>\n<p>mardown文件头部部分可以添加的属性说明</p>\n<pre><code>- title----------博客名称\n- date-----------发布日期\n- categories-----分类\n- tags-----------标签\n- preview--------列表页最多展示多少个文字\n- toc------------是否添加目录结构</code></pre><p>如果你想修改默模板可以去【scaffolds】文件夹下修改<code>post.md</code>文件</p>\n<h1 id=\"hexo-命令汇总\"><a href=\"#hexo-命令汇总\" class=\"headerlink\" title=\"hexo 命令汇总\"></a>hexo 命令汇总</h1><h4 id=\"1-基本命令\"><a href=\"#1-基本命令\" class=\"headerlink\" title=\"(1)基本命令\"></a>(1)基本命令</h4><table>\n<thead>\n<tr>\n<th>描述</th>\n<th>命令</th>\n<th>缩写</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>生成静态页面</td>\n<td>hexo generate</td>\n<td>hexo g</td>\n</tr>\n<tr>\n<td>开启服务</td>\n<td>hexo server</td>\n<td>hexo s</td>\n</tr>\n<tr>\n<td>部署到github</td>\n<td>hexo deploy</td>\n<td>hexo d</td>\n</tr>\n<tr>\n<td>新建文章</td>\n<td>hexo new “articleName”</td>\n<td>-</td>\n</tr>\n<tr>\n<td>新建页面</td>\n<td>hexo new page “htmlName”</td>\n<td>-</td>\n</tr>\n<tr>\n<td>查看帮助</td>\n<td>hexo help</td>\n<td>-</td>\n</tr>\n<tr>\n<td>查看hexo版本号</td>\n<td>hexo version</td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"2-组合命令\"><a href=\"#2-组合命令\" class=\"headerlink\" title=\"(2)组合命令\"></a>(2)组合命令</h4><table>\n<thead>\n<tr>\n<th>描述</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>生成页面并预览</td>\n<td>hexo s -g</td>\n</tr>\n<tr>\n<td>生成页面并上传到github</td>\n<td>hexo d -g</td>\n</tr>\n</tbody></table>\n<h1 id=\"添加标签页和分类页面\"><a href=\"#添加标签页和分类页面\" class=\"headerlink\" title=\"添加标签页和分类页面\"></a>添加标签页和分类页面</h1><h4 id=\"1-标签页\"><a href=\"#1-标签页\" class=\"headerlink\" title=\"(1)标签页\"></a>(1)标签页</h4><p>命令行输入</p>\n<pre><code>hexo new page &quot;tags&quot;</code></pre><p>这是hexo会在【soruce】文件夹下生成一个【tags】文件夹，修改该文件夹下的<code>index.md</code>,替换里边的内容为</p>\n<pre><code>---\ntitle: tags\ndate: 2020-04-28 17:15:54\ntype: &quot;tags&quot; \nlayout: &quot;tags&quot; \n---\n</code></pre><p>然后修改【theme】文件夹下的<code>_config.yml</code>的menu,添加如下配置</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020042918543177.png\" alt=\"image\"></p>\n<p>重新打包部署即可</p>\n<h4 id=\"2-分类页面\"><a href=\"#2-分类页面\" class=\"headerlink\" title=\"(2)分类页面\"></a>(2)分类页面</h4><p>分类页面和标签页类似，命令行输入</p>\n<pre><code>hexo new page &quot;categories&quot;</code></pre><p>这是hexo会在【soruce】文件夹下生成一个【tags】文件夹，修改该文件夹下的<code>index.md</code>,替换里边的内容为</p>\n<pre><code>---\ntitle: categories\ndate: 2020-04-28 16:46:27\ntype: &quot;categories&quot;\nlayout: &quot;categories&quot;\ncomments: false\n---\n\n</code></pre><p>然后修改【theme】文件夹下的<code>_config.yml</code>的menu,添加如下配置</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200429185756736.png\" alt=\"image\"></p>\n<p>重新打包部署即可</p>\n<h1 id=\"添加评论插件\"><a href=\"#添加评论插件\" class=\"headerlink\" title=\"添加评论插件\"></a>添加评论插件</h1><p>网上的评论插件很多，但是最终我选择了<code>valine</code>, valine有一个自己的评论管理后台<code>leancloud</code>,每次读者在博客的评论都会流入leancloud后台。<br>但是，<code>freemind.386</code>这个主题没有集成valine,后来从网上找了方法，改造了一下主题，如果其他主题没有集成valine,也可以用下边的方法。</p>\n<p>具体方法是在主题目录的【layout】–&gt;【_partial】–&gt;【post】文件夹下新建<code>valine.ejs</code>文件，里边填写如下代码</p>\n<pre><code>&lt;div id=&quot;comment&quot;&gt;&lt;/div&gt;\n&lt;script src=&#39;//unpkg.com/valine/dist/Valine.min.js&#39;&gt;&lt;/script&gt;\n&lt;script&gt;\nnew Valine({\n    el: &#39;#comment&#39; ,\n    notify:true, \n    verify:true, \n    appId: &#39;&lt;%=theme.valine.appId%&gt;&#39;,\n    appKey: &#39;&lt;%=theme.valine.appKey%&gt;&#39;,\n    placeholder: &#39;&lt;%=theme.valine.appKey%&gt;&#39;,\n    path:window.location.pathname, \n    avatar:&#39;mm&#39; \n});\n&lt;/script&gt;</code></pre><p>然后在主题目录的【layout】–&gt;【_partial】的<code>article.ejs</code>文件中找到</p>\n<pre><code>    &lt;%- partial(&#39;post/comment&#39;, {page: item}) %&gt;</code></pre><p>这行代码下面填写</p>\n<pre><code>&lt;% if (theme.valine &amp;&amp; theme.valine.appId &amp;&amp; theme.valine.appKey){ %&gt;\n        &lt;section id=&quot;comments&quot; class=&quot;comments&quot;&gt;\n            &lt;style&gt;\n            .comments{padding:10px;background:#fff}\n            @media screen and (max-width:800px){.comments{margin:auto;padding:10px;background:#000}}\n            &lt;/style&gt;\n            &lt;%- partial(&#39;post/valine&#39;, {\n            key: post.slug,\n            title: post.title,\n            url: config.url+url_for(post.path)\n            }) %&gt;\n        &lt;/section&gt;\n    &lt;% } %&gt;</code></pre><p>我把修改好的主题上传到我的github中，可以自行clone到【themes】文件夹下， <a href=\"https://github.com/qisi007/hexo-theme-freemind.386.second\">传送门</a>。</p>\n<p>上述工作完成后我们看看怎么添加valine评论插件。 </p>\n<p>首先去leancloud官网注册账号<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">传送门</a>。注册完成之后进个人管理页面<code>添加应用</code>,输入应用名称，下边选开发板</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200430114031590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>点击设置按钮</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200430114551854.png\" alt=\"image\"></p>\n<p>点击左边【存储】–&gt;【创建class】,新建两个类用来存储评论，分别是<code>Comment</code>和<code>Counter</code></p>\n<p>然后点击左边【设置】–&gt;【安全中心】把没用的服务都关掉</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200430114909833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>然后点击【应用Keys】记录下<code>AppID</code>和<code>AppKey</code>,这两个是需要配置到项目中的</p>\n<p>最后在主题文件夹的<code>_config.yml</code>配置文件中添加如下代码，把<code>AppID</code>和<code>AppKey</code>添加到对应位置</p>\n<pre><code>valine:\n  enable: true # 是否开启\n  appId:    # 上一步获取的 App ID\n  appKey:   # 上一步获取的 App Key\n  notify: true # 新留言是否需要通知 https://github.com/xCss/Valine/wiki\n  verify: true # 是否需要验证，验证比较反人类建议false关闭\n  placeholder: 请在此输入您的留言 # 默认留言框内的文字\n  avatar: mm # 默认头像\n  guest_info: nick,mail # 默认留言框的头部需要访问者输入的信息\n  pageSize: 10 # pagination size #默认单页的留言条数</code></pre><p>最后执行<code>hexo d -g</code>打包部署，访问域名应该就可以了</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200430115425744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>好了，到现在可以拿着自己的网站出去装逼了，其实还有很多功能，只不过我现在没有研究，比如<code>相册</code>，<code>音乐播放器</code>等，等我以后有时间弄出来之后再分享给大家。</p>\n<p>我把我搭建的博客代码仓库地址也上传到了我的github中<a href=\"https://github.com/qisi007/website-code-save\">传送门</a>；</p>\n<p><a href=\"https://www.liuguisheng.vip/\" target=\"_blank\" rel=\"noopener\">我的个人主页地址</a></p>\n<p>最后感谢下边博客的博主提供的帮助，小心心送上❤❤；</p>\n<p>感谢:</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/28321740\" target=\"_blank\" rel=\"noopener\">三分钟在GitHub上搭建个人博客</a></p>\n<p><a href=\"https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html\" target=\"_blank\" rel=\"noopener\">使用hexo+github搭建免费个人博客详细教程</a></p>\n"},{"title":"hexo博客添加gitalk评论系统","date":"2020-09-25T09:48:32.000Z","_content":"\n&emsp;&emsp;经过了一天的折腾，我终于为自己的博客添加上了评论系统。坦率的讲，为什么网上那么多方案我还要自己写一篇博客，那就是因为他们说的都有bug,所以我要自己总结一下。\n\n&emsp;&emsp;我选用的是gitalk评论系统，原因是因为它可以直接在github上管理评论，不需要在别的平台注册，特别方便。下面我来详细说一下hexo博客是如何添加gitalk评论的。\n\n&emsp;&emsp;先看一下效果：\n\n\n![image](https://img-blog.csdnimg.cn/2020092516551467.gif)\n\n\n# 一、配置github\n&emsp;&emsp;首先进入`github`,点击右上角头像【Settings】->【Developer settings】->【OAuth Apps】->【New OAuth App】进行基本配置（**一定要细心，看清截图中的红字**）。\n\n![image](https://img-blog.csdnimg.cn/20200925170806924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n&emsp;&emsp;上面的填写成功之后进入,我们需要的是生成的`Client ID\n`和`Client Secret`\n\n![image](https://img-blog.csdnimg.cn/2020092517103878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n# 二、博客配置\n\n&emsp;&emsp;上面的确认无误后，我们进行配置博客，引入gitalk。\n\n&emsp;&emsp;首先进入主题的配置文件`_config.yml`(注意是主题的配置文件，不是博客根目录下的配置文件)，添加gitalk配置(一定要仔细，缺一不可)。\n\n```\ngitalk:\n  enable: true 开启gitalk评论，不需要配置\n  owner: github用户名\n  admin: github用户名\n  repo: 博客的仓库名称(注意不是地址)\n  ClientID: 上面生成的Client ID\n  ClientSecret: 上面生成的Client Secret\n  labels: 'gitalk' github issue 对应的issue标签（新建一个）\n  distractionFreeMode: true  无干扰模式，不需要更改\n```\n&emsp;&emsp; 下面是我的配置：\n\n![image](https://img-blog.csdnimg.cn/20200925172124545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n\n&emsp;&emsp; 上面配置完毕后，进入主题目录->【layout】->【_partial】->【post】目录，在当前目录下新建一个`gitalk.ejs`文件，写入如下代码：\n```\n<link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\">\n<script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n<script src=\"https://priesttomb.github.io/js/md5.min.js\"></script>\n<script type=\"text/javascript\">\n    new Gitalk({\n        clientID: '手动马赛克',\n        clientSecret: '手动马赛克',\n        repo: 'qisi007.github.io',\n        owner: 'qisi007',\n        admin: 'qisi007',\n        id: md5(location.pathname),\n        distractionFreeMode: true\n    }).render('gitalk-container')\n</script>\n```\n\n&emsp;&emsp; 里边的配置我就我说了，和上面的一摸一样，然后进入上一级的目录，路径是\n主题目录->【layout】->【_partial】下的`article.ejs`文件最后面加入下边的代码：\n```\n<% if (theme.gitalk.enable){ %>\n\t<div id=\"gitalk-container\"></div>\n\t<%- include post/gitalk.ejs %>\n<% } %>\n```\n&emsp;&emsp;好了，到此为止，所有的配置就完成了。\n\n&emsp;&emsp;执行命令`hexo d -g`打包发布，过几分钟应该能看到效果了，应该能看到效果了。\n\n&emsp;&emsp;评论管理页面在仓库的issue里边。\n\n![image](https://img-blog.csdnimg.cn/20200925173032555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n# 三、问题\n\n&emsp;&emsp;大部分问题都是因为`Homepage URL`和`Authorization callback URL`这两个地址错误引起的，比如服务器错误，或者是点击登录跳转到博客主页等等。\n\n&emsp;&emsp;还有个问题是进入博客详情页后，评论插件上面显示`Error: Validation Failed`, 这是因为文章名称经URL编码后添加到issues的label里，但是label的长度上限是50个字符，所以文章名有些长的都会生成label失败，也就没办法评论了。\n\n&emsp;&emsp;所以上面我们用到了`md5`,文章名经URL编码后转MD5，然后再生成label,这样就不会超过长度了。\n\n![image](https://img-blog.csdnimg.cn/20200925173930342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n# 四、写在最后\n\n&emsp;&emsp; 我的博客主题用的是`freemind`，这是一个复古风格的主题，这个主题本身不带评论插件的，本人进行了二次封装，修改了一些样式和bug,并上传到了自己的`github`中，欢迎star。  [**传送门**](https://github.com/qisi007/hexo-theme-freemind.386.second)\n\n\n个人博客主页: [传送](https://www.liuguisheng.vip)\n开源项目（react-admin-plus）: [传送](https://github.com/qisi007/react-admin-plus)","source":"_posts/hexo博客添加gitalk评论系统.md","raw":"---\ntitle: hexo博客添加gitalk评论系统\ndate: 2020-09-25 17:48:32\ntags:\n - hexo\n - github\n - gitalk\n---\n\n&emsp;&emsp;经过了一天的折腾，我终于为自己的博客添加上了评论系统。坦率的讲，为什么网上那么多方案我还要自己写一篇博客，那就是因为他们说的都有bug,所以我要自己总结一下。\n\n&emsp;&emsp;我选用的是gitalk评论系统，原因是因为它可以直接在github上管理评论，不需要在别的平台注册，特别方便。下面我来详细说一下hexo博客是如何添加gitalk评论的。\n\n&emsp;&emsp;先看一下效果：\n\n\n![image](https://img-blog.csdnimg.cn/2020092516551467.gif)\n\n\n# 一、配置github\n&emsp;&emsp;首先进入`github`,点击右上角头像【Settings】->【Developer settings】->【OAuth Apps】->【New OAuth App】进行基本配置（**一定要细心，看清截图中的红字**）。\n\n![image](https://img-blog.csdnimg.cn/20200925170806924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n&emsp;&emsp;上面的填写成功之后进入,我们需要的是生成的`Client ID\n`和`Client Secret`\n\n![image](https://img-blog.csdnimg.cn/2020092517103878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n# 二、博客配置\n\n&emsp;&emsp;上面的确认无误后，我们进行配置博客，引入gitalk。\n\n&emsp;&emsp;首先进入主题的配置文件`_config.yml`(注意是主题的配置文件，不是博客根目录下的配置文件)，添加gitalk配置(一定要仔细，缺一不可)。\n\n```\ngitalk:\n  enable: true 开启gitalk评论，不需要配置\n  owner: github用户名\n  admin: github用户名\n  repo: 博客的仓库名称(注意不是地址)\n  ClientID: 上面生成的Client ID\n  ClientSecret: 上面生成的Client Secret\n  labels: 'gitalk' github issue 对应的issue标签（新建一个）\n  distractionFreeMode: true  无干扰模式，不需要更改\n```\n&emsp;&emsp; 下面是我的配置：\n\n![image](https://img-blog.csdnimg.cn/20200925172124545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n\n&emsp;&emsp; 上面配置完毕后，进入主题目录->【layout】->【_partial】->【post】目录，在当前目录下新建一个`gitalk.ejs`文件，写入如下代码：\n```\n<link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\">\n<script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n<script src=\"https://priesttomb.github.io/js/md5.min.js\"></script>\n<script type=\"text/javascript\">\n    new Gitalk({\n        clientID: '手动马赛克',\n        clientSecret: '手动马赛克',\n        repo: 'qisi007.github.io',\n        owner: 'qisi007',\n        admin: 'qisi007',\n        id: md5(location.pathname),\n        distractionFreeMode: true\n    }).render('gitalk-container')\n</script>\n```\n\n&emsp;&emsp; 里边的配置我就我说了，和上面的一摸一样，然后进入上一级的目录，路径是\n主题目录->【layout】->【_partial】下的`article.ejs`文件最后面加入下边的代码：\n```\n<% if (theme.gitalk.enable){ %>\n\t<div id=\"gitalk-container\"></div>\n\t<%- include post/gitalk.ejs %>\n<% } %>\n```\n&emsp;&emsp;好了，到此为止，所有的配置就完成了。\n\n&emsp;&emsp;执行命令`hexo d -g`打包发布，过几分钟应该能看到效果了，应该能看到效果了。\n\n&emsp;&emsp;评论管理页面在仓库的issue里边。\n\n![image](https://img-blog.csdnimg.cn/20200925173032555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n# 三、问题\n\n&emsp;&emsp;大部分问题都是因为`Homepage URL`和`Authorization callback URL`这两个地址错误引起的，比如服务器错误，或者是点击登录跳转到博客主页等等。\n\n&emsp;&emsp;还有个问题是进入博客详情页后，评论插件上面显示`Error: Validation Failed`, 这是因为文章名称经URL编码后添加到issues的label里，但是label的长度上限是50个字符，所以文章名有些长的都会生成label失败，也就没办法评论了。\n\n&emsp;&emsp;所以上面我们用到了`md5`,文章名经URL编码后转MD5，然后再生成label,这样就不会超过长度了。\n\n![image](https://img-blog.csdnimg.cn/20200925173930342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70)\n\n# 四、写在最后\n\n&emsp;&emsp; 我的博客主题用的是`freemind`，这是一个复古风格的主题，这个主题本身不带评论插件的，本人进行了二次封装，修改了一些样式和bug,并上传到了自己的`github`中，欢迎star。  [**传送门**](https://github.com/qisi007/hexo-theme-freemind.386.second)\n\n\n个人博客主页: [传送](https://www.liuguisheng.vip)\n开源项目（react-admin-plus）: [传送](https://github.com/qisi007/react-admin-plus)","slug":"hexo博客添加gitalk评论系统","published":1,"updated":"2020-09-29T02:00:41.731Z","_id":"ckfi2chos000010ufg3fg3edy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>&emsp;&emsp;经过了一天的折腾，我终于为自己的博客添加上了评论系统。坦率的讲，为什么网上那么多方案我还要自己写一篇博客，那就是因为他们说的都有bug,所以我要自己总结一下。</p>\n<p>&emsp;&emsp;我选用的是gitalk评论系统，原因是因为它可以直接在github上管理评论，不需要在别的平台注册，特别方便。下面我来详细说一下hexo博客是如何添加gitalk评论的。</p>\n<p>&emsp;&emsp;先看一下效果：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020092516551467.gif\" alt=\"image\"></p>\n<h1 id=\"一、配置github\"><a href=\"#一、配置github\" class=\"headerlink\" title=\"一、配置github\"></a>一、配置github</h1><p>&emsp;&emsp;首先进入<code>github</code>,点击右上角头像【Settings】-&gt;【Developer settings】-&gt;【OAuth Apps】-&gt;【New OAuth App】进行基本配置（<strong>一定要细心，看清截图中的红字</strong>）。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200925170806924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>&emsp;&emsp;上面的填写成功之后进入,我们需要的是生成的<code>Client ID</code>和<code>Client Secret</code></p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020092517103878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<h1 id=\"二、博客配置\"><a href=\"#二、博客配置\" class=\"headerlink\" title=\"二、博客配置\"></a>二、博客配置</h1><p>&emsp;&emsp;上面的确认无误后，我们进行配置博客，引入gitalk。</p>\n<p>&emsp;&emsp;首先进入主题的配置文件<code>_config.yml</code>(注意是主题的配置文件，不是博客根目录下的配置文件)，添加gitalk配置(一定要仔细，缺一不可)。</p>\n<pre><code>gitalk:\n  enable: true 开启gitalk评论，不需要配置\n  owner: github用户名\n  admin: github用户名\n  repo: 博客的仓库名称(注意不是地址)\n  ClientID: 上面生成的Client ID\n  ClientSecret: 上面生成的Client Secret\n  labels: &#39;gitalk&#39; github issue 对应的issue标签（新建一个）\n  distractionFreeMode: true  无干扰模式，不需要更改</code></pre><p>&emsp;&emsp; 下面是我的配置：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200925172124545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>&emsp;&emsp; 上面配置完毕后，进入主题目录-&gt;【layout】-&gt;【_partial】-&gt;【post】目录，在当前目录下新建一个<code>gitalk.ejs</code>文件，写入如下代码：</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;\n&lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://priesttomb.github.io/js/md5.min.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n    new Gitalk({\n        clientID: &#39;手动马赛克&#39;,\n        clientSecret: &#39;手动马赛克&#39;,\n        repo: &#39;qisi007.github.io&#39;,\n        owner: &#39;qisi007&#39;,\n        admin: &#39;qisi007&#39;,\n        id: md5(location.pathname),\n        distractionFreeMode: true\n    }).render(&#39;gitalk-container&#39;)\n&lt;/script&gt;</code></pre><p>&emsp;&emsp; 里边的配置我就我说了，和上面的一摸一样，然后进入上一级的目录，路径是<br>主题目录-&gt;【layout】-&gt;【_partial】下的<code>article.ejs</code>文件最后面加入下边的代码：</p>\n<pre><code>&lt;% if (theme.gitalk.enable){ %&gt;\n    &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;\n    &lt;%- include post/gitalk.ejs %&gt;\n&lt;% } %&gt;</code></pre><p>&emsp;&emsp;好了，到此为止，所有的配置就完成了。</p>\n<p>&emsp;&emsp;执行命令<code>hexo d -g</code>打包发布，过几分钟应该能看到效果了，应该能看到效果了。</p>\n<p>&emsp;&emsp;评论管理页面在仓库的issue里边。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200925173032555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<h1 id=\"三、问题\"><a href=\"#三、问题\" class=\"headerlink\" title=\"三、问题\"></a>三、问题</h1><p>&emsp;&emsp;大部分问题都是因为<code>Homepage URL</code>和<code>Authorization callback URL</code>这两个地址错误引起的，比如服务器错误，或者是点击登录跳转到博客主页等等。</p>\n<p>&emsp;&emsp;还有个问题是进入博客详情页后，评论插件上面显示<code>Error: Validation Failed</code>, 这是因为文章名称经URL编码后添加到issues的label里，但是label的长度上限是50个字符，所以文章名有些长的都会生成label失败，也就没办法评论了。</p>\n<p>&emsp;&emsp;所以上面我们用到了<code>md5</code>,文章名经URL编码后转MD5，然后再生成label,这样就不会超过长度了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200925173930342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<h1 id=\"四、写在最后\"><a href=\"#四、写在最后\" class=\"headerlink\" title=\"四、写在最后\"></a>四、写在最后</h1><p>&emsp;&emsp; 我的博客主题用的是<code>freemind</code>，这是一个复古风格的主题，这个主题本身不带评论插件的，本人进行了二次封装，修改了一些样式和bug,并上传到了自己的<code>github</code>中，欢迎star。  <a href=\"https://github.com/qisi007/hexo-theme-freemind.386.second\"><strong>传送门</strong></a></p>\n<p>个人博客主页: <a href=\"https://www.liuguisheng.vip\" target=\"_blank\" rel=\"noopener\">传送</a><br>开源项目（react-admin-plus）: <a href=\"https://github.com/qisi007/react-admin-plus\">传送</a></p>\n","site":{"data":{"galleries":[{"name":"2017","cover":"https://img-blog.csdnimg.cn/20191201090129350.jpg","description":"2017年记录","photos":["https://img-blog.csdnimg.cn/20191201090129350.jpg","https://img-blog.csdnimg.cn/20200216200900531.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70"]}]}},"excerpt":"经过了一天的折腾，我终于为自己的博客添加上了评论系统。坦率的讲，为什么网上那么多方案我还要自己写一篇博客，那就是因为他们说的都有bug,所以我要自己总结一下。\n\n我选用的是gitalk评论系统，原因是因为它可以直接在github上管理评论，不需要在别的平台注册，特别方便。下面我来详细说一下hexo博客是如何添加gitalk评论的。\n\n先看一下效果：\n\n\n\n一、配置github\n首先进入github,点击右上角头像【Settings】->【Developer settings】->【OAuth Apps】->【New OAuth App】进行基本配置（一定要细心，看清截图中的红字）。\n\n\n\n上面","more":"<p>&emsp;&emsp;经过了一天的折腾，我终于为自己的博客添加上了评论系统。坦率的讲，为什么网上那么多方案我还要自己写一篇博客，那就是因为他们说的都有bug,所以我要自己总结一下。</p>\n<p>&emsp;&emsp;我选用的是gitalk评论系统，原因是因为它可以直接在github上管理评论，不需要在别的平台注册，特别方便。下面我来详细说一下hexo博客是如何添加gitalk评论的。</p>\n<p>&emsp;&emsp;先看一下效果：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020092516551467.gif\" alt=\"image\"></p>\n<h1 id=\"一、配置github\"><a href=\"#一、配置github\" class=\"headerlink\" title=\"一、配置github\"></a>一、配置github</h1><p>&emsp;&emsp;首先进入<code>github</code>,点击右上角头像【Settings】-&gt;【Developer settings】-&gt;【OAuth Apps】-&gt;【New OAuth App】进行基本配置（<strong>一定要细心，看清截图中的红字</strong>）。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200925170806924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>&emsp;&emsp;上面的填写成功之后进入,我们需要的是生成的<code>Client ID</code>和<code>Client Secret</code></p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020092517103878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<h1 id=\"二、博客配置\"><a href=\"#二、博客配置\" class=\"headerlink\" title=\"二、博客配置\"></a>二、博客配置</h1><p>&emsp;&emsp;上面的确认无误后，我们进行配置博客，引入gitalk。</p>\n<p>&emsp;&emsp;首先进入主题的配置文件<code>_config.yml</code>(注意是主题的配置文件，不是博客根目录下的配置文件)，添加gitalk配置(一定要仔细，缺一不可)。</p>\n<pre><code>gitalk:\n  enable: true 开启gitalk评论，不需要配置\n  owner: github用户名\n  admin: github用户名\n  repo: 博客的仓库名称(注意不是地址)\n  ClientID: 上面生成的Client ID\n  ClientSecret: 上面生成的Client Secret\n  labels: &#39;gitalk&#39; github issue 对应的issue标签（新建一个）\n  distractionFreeMode: true  无干扰模式，不需要更改</code></pre><p>&emsp;&emsp; 下面是我的配置：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200925172124545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>&emsp;&emsp; 上面配置完毕后，进入主题目录-&gt;【layout】-&gt;【_partial】-&gt;【post】目录，在当前目录下新建一个<code>gitalk.ejs</code>文件，写入如下代码：</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;\n&lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://priesttomb.github.io/js/md5.min.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n    new Gitalk({\n        clientID: &#39;手动马赛克&#39;,\n        clientSecret: &#39;手动马赛克&#39;,\n        repo: &#39;qisi007.github.io&#39;,\n        owner: &#39;qisi007&#39;,\n        admin: &#39;qisi007&#39;,\n        id: md5(location.pathname),\n        distractionFreeMode: true\n    }).render(&#39;gitalk-container&#39;)\n&lt;/script&gt;</code></pre><p>&emsp;&emsp; 里边的配置我就我说了，和上面的一摸一样，然后进入上一级的目录，路径是<br>主题目录-&gt;【layout】-&gt;【_partial】下的<code>article.ejs</code>文件最后面加入下边的代码：</p>\n<pre><code>&lt;% if (theme.gitalk.enable){ %&gt;\n    &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;\n    &lt;%- include post/gitalk.ejs %&gt;\n&lt;% } %&gt;</code></pre><p>&emsp;&emsp;好了，到此为止，所有的配置就完成了。</p>\n<p>&emsp;&emsp;执行命令<code>hexo d -g</code>打包发布，过几分钟应该能看到效果了，应该能看到效果了。</p>\n<p>&emsp;&emsp;评论管理页面在仓库的issue里边。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200925173032555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<h1 id=\"三、问题\"><a href=\"#三、问题\" class=\"headerlink\" title=\"三、问题\"></a>三、问题</h1><p>&emsp;&emsp;大部分问题都是因为<code>Homepage URL</code>和<code>Authorization callback URL</code>这两个地址错误引起的，比如服务器错误，或者是点击登录跳转到博客主页等等。</p>\n<p>&emsp;&emsp;还有个问题是进入博客详情页后，评论插件上面显示<code>Error: Validation Failed</code>, 这是因为文章名称经URL编码后添加到issues的label里，但是label的长度上限是50个字符，所以文章名有些长的都会生成label失败，也就没办法评论了。</p>\n<p>&emsp;&emsp;所以上面我们用到了<code>md5</code>,文章名经URL编码后转MD5，然后再生成label,这样就不会超过长度了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200925173930342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVMaXVndWlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<h1 id=\"四、写在最后\"><a href=\"#四、写在最后\" class=\"headerlink\" title=\"四、写在最后\"></a>四、写在最后</h1><p>&emsp;&emsp; 我的博客主题用的是<code>freemind</code>，这是一个复古风格的主题，这个主题本身不带评论插件的，本人进行了二次封装，修改了一些样式和bug,并上传到了自己的<code>github</code>中，欢迎star。  <a href=\"https://github.com/qisi007/hexo-theme-freemind.386.second\"><strong>传送门</strong></a></p>\n<p>个人博客主页: <a href=\"https://www.liuguisheng.vip\" target=\"_blank\" rel=\"noopener\">传送</a><br>开源项目（react-admin-plus）: <a href=\"https://github.com/qisi007/react-admin-plus\">传送</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckf0hztmh0000oouf312l2yz5","category_id":"ckf0hztms0004oouf545o9tec","_id":"ckf0hztn0000aoouf1r0vhzyw"},{"post_id":"ckf0hztmp0002ooufepaa0a8c","category_id":"ckf0hztms0004oouf545o9tec","_id":"ckf0hztn0000coouf3qus0ccv"}],"PostTag":[{"post_id":"ckf0hztmh0000oouf312l2yz5","tag_id":"ckf0hztmt0005ooufcszmbcc4","_id":"ckf0hztn2000foouf4loue2cq"},{"post_id":"ckf0hztmh0000oouf312l2yz5","tag_id":"ckf0hztmx0009oouf8v7i9yak","_id":"ckf0hztn2000gooufe7ozcumn"},{"post_id":"ckf0hztmh0000oouf312l2yz5","tag_id":"ckf0hztn0000boouf87djb81z","_id":"ckf0hztn2000iooufhhvs5t6f"},{"post_id":"ckf0hztmh0000oouf312l2yz5","tag_id":"ckf0hztn0000dooufge2l1dkc","_id":"ckf0hztn3000jooufdb055h9l"},{"post_id":"ckf0hztmp0002ooufepaa0a8c","tag_id":"ckf0hztn1000eoouffqvr6f9q","_id":"ckf0hztn3000kooufg63e1k5n"},{"post_id":"ckf0hztmp0002ooufepaa0a8c","tag_id":"ckf0hztn2000hoouf9qp96hbl","_id":"ckf0hztn3000loouf2zr37ofl"},{"post_id":"ckfi2chos000010ufg3fg3edy","tag_id":"ckf0hztn1000eoouffqvr6f9q","_id":"ckfi2chp4000210uf4y3t4jbc"},{"post_id":"ckfi2chos000010ufg3fg3edy","tag_id":"ckf0hztn2000hoouf9qp96hbl","_id":"ckfi2chp4000310uf4e0yg6y0"},{"post_id":"ckfi2chos000010ufg3fg3edy","tag_id":"ckfi2choz000110uf3xx844c5","_id":"ckfi2chp4000410ufb529djql"}],"Tag":[{"name":"vue","_id":"ckf0hztmt0005ooufcszmbcc4"},{"name":"性能优化","_id":"ckf0hztmx0009oouf8v7i9yak"},{"name":"vue性能优化","_id":"ckf0hztn0000boouf87djb81z"},{"name":"前端性能优化","_id":"ckf0hztn0000dooufge2l1dkc"},{"name":"hexo","_id":"ckf0hztn1000eoouffqvr6f9q"},{"name":"github","_id":"ckf0hztn2000hoouf9qp96hbl"},{"name":"gitalk","_id":"ckfi2choz000110uf3xx844c5"}]}}